{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "jni/android/main.c",
			"settings":
			{
				"buffer_size": 19601,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 329 files for \"AINPUT_SOURCE_TOUCHPAD\" (case sensitive)\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/main.c:\n  377  	int nSourceId = AInputEvent_getSource( event );\n  378  \n  379: 	if( nSourceId == AINPUT_SOURCE_TOUCHPAD )\n  380     		touchstate = engine.touchstate_pad; // GJT: For Xperia Play...and others?\n  381  	else\n\n1 match in 1 file\n\n\nSearching 329 files for \"ANDROID\" (case sensitive)\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/Android.mk:\n   10  LOCAL_MODULE := libshmup\n   11  \n   12: LOCAL_CFLAGS := -DANDROID -DNATIVE_ACTIVITY -DAL_BUILD_LIBRARY -DAL_ALEXT_PROTOTYPES $(LOCAL_CFLAGS)\n   13  \n   14  SHMUP_FILES := $(wildcard $(LOCAL_PATH)/src/*.c) \n   15  SHMUP_FILES := $(SHMUP_FILES:$(LOCAL_PATH)/%=%) \n   16  \n   17: ANDROID_FILES := $(wildcard $(LOCAL_PATH)/android/*.c) \n   18: ANDROID_FILES := $(ANDROID_FILES:$(LOCAL_PATH)/%=%) \n   19  \n   20  LIBZIP_FILES := $(wildcard $(LOCAL_PATH)/../libzip/*.c) \n   ..\n   22  \n   23  LOCAL_C_INCLUDES := $(LOCAL_PATH)/android $(LOCAL_PATH)/src $(LOCAL_PATH)/libzip $(LOCAL_PATH)/libpng $(LOCAL_PATH)/openal/include $(LOCAL_PATH)/openal/OpenAL32/Include \n   24: LOCAL_SRC_FILES := $(ANDROID_FILES) $(SHMUP_FILES)\n   25  LOCAL_LDLIBS    := -llog -landroid -lEGL -lGLESv1_CM -lGLESv2 -lOpenSLES -ldl -lz -Wl,-s\n   26  \n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/android_utils.c:\n  141  \n  142      // configure audio source\n  143:     SLDataLocator_AndroidSimpleBufferQueue loc_bufq = {SL_DATALOCATOR_ANDROIDSIMPLEBUFFERQUEUE, 2};\n  144      SLDataFormat_PCM format_pcm = {SL_DATAFORMAT_PCM, 1, SL_SAMPLINGRATE_8,\n  145          SL_PCMSAMPLEFORMAT_FIXED_16, SL_PCMSAMPLEFORMAT_FIXED_16,\n  ...\n  213  \n  214      // configure audio source\n  215:     SLDataLocator_AndroidFD loc_fd = {SL_DATALOCATOR_ANDROIDFD, fd, start, length};\n  216      SLDataFormat_MIME format_mime = {SL_DATAFORMAT_MIME, NULL, SL_CONTAINERTYPE_UNSPECIFIED};\n  217      SLDataSource audioSrc = {&loc_fd, &format_mime};\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/android_utils.h:\n    1: #ifndef ANDROID_UTILS_H\n    2: #define ANDROID_UTILS_H\n    3  \n    4  #include <assert.h>\n    .\n   26  \n   27  #define  LOG_TAG    \"libshmup\"\n   28: #define  LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)\n   29: #define  LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG,__VA_ARGS__)\n   30: #define  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)\n   31  \n   32: #define printf(fmt,args...)  __android_log_print(ANDROID_LOG_INFO  ,LOG_TAG, fmt, ##args) \n   33  \n   34  /**\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/native_app_glue.c:\n   26  #include <android/log.h>\n   27  \n   28: #define LOGW(...) ((void)__android_log_print(ANDROID_LOG_WARN, \"threaded_app\", __VA_ARGS__))\n   29  \n   30  static void free_saved_state(struct android_app* android_app) {\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/native_app_glue.h:\n   16   */\n   17  \n   18: #ifndef _ANDROID_NATIVE_APP_GLUE_H\n   19: #define _ANDROID_NATIVE_APP_GLUE_H\n   20  \n   21  #include <poll.h>\n   ..\n  349  #endif\n  350  \n  351: #endif /* _ANDROID_NATIVE_APP_GLUE_H */\n  352  \n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/Shmup.sublime-workspace:\n  308  			\"UNREALTH.mp3\",\n  309  			\"Could not open file\",\n  310: 			\"ANDROID\",\n  311  			\"isWriting\",\n  312  			\"\\\"WD\\\"\",\n  ...\n  331  			\"string\",\n  332  			\"#include \\\"math_shmup.h\\\"\",\n  333: 			\"ANDROID_PATH\",\n  334  			\"env\",\n  335  			\"envNA\",\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/openal/Android.mk:\n   10  \n   11  LOCAL_C_INCLUDES := $(foreach D, $(APP_SUBDIRS), $(LOCAL_PATH)/$(D)) $(LOCAL_PATH)/include\n   12: LOCAL_CFLAGS := -O3 -DHAVE_CONFIG_H -DAL_ALEXT_PROTOTYPES -DANDROID\n   13  \n   14  \n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/openal/src/Alc/ALc.c:\n   70      { \"port\", alc_pa_init, alc_pa_deinit, alc_pa_probe, EmptyFuncs },\n   71  #endif\n   72: #ifdef HAVE_ANDROID\n   73      { \"android\", alc_android_init, alc_android_deinit, alc_android_probe, EmptyFuncs },\n   74  #endif\n   ..\n  638      str[sizeof(str)-1] = 0;\n  639  \n  640: #ifdef ANDROID\n  641:     __android_log_write(ANDROID_LOG_WARN, \"OpenAL\", str);\n  642  #endif\n  643      fprintf(LogFile, \"%s\", str);\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/openal/src/config.h:\n    6  \n    7  /* Define if we have the PulseAudio backend */\n    8: #define HAVE_ANDROID 1\n    9  \n   10  /* Define if we have dlfcn.h */\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/openal/src/OpenAL32/Include/alMain.h:\n  131  #include <errno.h>\n  132  \n  133: #ifdef ANDROID\n  134  #include <android/log.h>\n  135  #endif\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/camera.c:\n   34  #include \"vis.h\"\n   35  \n   36: #ifdef ANDROID\n   37  #include \"../android/android_utils.h\"\n   38  #endif\n   ..\n  272  	strcat(filename, f);\n  273  	\n  274: 	#ifndef ANDROID\n  275  	fileHandle = fopen(filename, \"rb\");\n  276  	#else\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/dEngine.h:\n   41  #include \"renderer.h\"\n   42  \n   43: #ifdef ANDROID\n   44  #include <jni.h>\n   45  #include <android/sensor.h>\n   ..\n  116  	uchar difficultyLevel ;\n  117  	\n  118: 	#ifdef ANDROID\n  119      struct android_app* app;\n  120  \n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/entities.c:\n   28  #include \"renderer.h\"\n   29  \n   30: #ifdef ANDROID\n   31  #include \"../android/android_utils.h\"\n   32  #endif\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/filesystem.c:\n   26  #include \"filesystem.h\"\n   27  \n   28: #ifdef ANDROID\n   29  #include \"../android/android_utils.h\"\n   30  #include <zip.h>\n   ..\n   98  	sprintf( netpath, \"%s/%s\", pathBase, filename );\n   99  	\n  100: 	#if (!ANDROID) && (!WRITING)\n  101  	fd = fopen( netpath, mode );\n  102  \n  ...\n  129  	memset( hFile, 0, sizeof( filehandle_t ) );\n  130  	\n  131: 	#if (!ANDROID) && (!WRITING)\n  132  	pos = ftell (fd);\n  133  	fseek (fd, 0, SEEK_END);\n  ...\n  152  	hFile->filedata = calloc( hFile->filesize,sizeof(char) );\n  153  	\n  154: 	#if (!ANDROID) && (!WRITING)\n  155  	fread(hFile->filedata, sizeof(char),hFile->filesize, fd);\n  156  	#else\n  ...\n  172  	\n  173  \n  174: 	#if (!ANDROID) && (!WRITING)\n  175  	if (!hFile->isWritable)\n  176  		fclose( fd );\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/globals.h:\n   27  #define ED_GLOBAL\n   28  \n   29: #ifndef ANDROID\n   30  typedef unsigned int uint ;\n   31  #endif\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/material.c:\n   30  #include \"renderer.h\"\n   31  \n   32: #ifdef ANDROID\n   33  #include \"../android/android_utils.h\"\n   34  #endif\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/md5.c:\n   35  #include \"renderer.h\"\n   36  \n   37: #ifdef ANDROID\n   38  #include \"../android/android_utils.h\"\n   39  #endif\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/netchannel.c:\n   23   *\n   24   */\n   25: #ifndef ANDROID\n   26  #include \"netchannel.h\"\n   27  \n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/netchannel.h:\n   25  \n   26  \n   27: #ifndef ANDROID\n   28  #ifndef DF_NETCHANNEL\n   29  #define DF_NETCHANNEL\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/renderer_fixed.c:\n   35  #ifdef WIN32\n   36  	#include \"GLES/gl.h\"\n   37: #elif ANDROID\n   38  	#include <GLES/gl.h>\n   39  	#include \"../android/android_utils.h\"\n   ..\n  195  		glTexParameterf(GL_TEXTURE_2D,GL_GENERATE_MIPMAP, GL_TRUE);\n  196  \n  197: 		#ifndef ANDROID\n  198  		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, texture->width, texture->height, 0, GL_RGBA, GL_UNSIGNED_BYTE, texture->data[0]);\n  199  		#else\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/renderer_progr.c:\n   52  	#include \"GLES2/gl2ext.h\"\n   53  	typedef char GLchar;\n   54: #elif ANDROID\n   55  	#include <GLES2/gl2.h>\n   56  	#include <GLES2/gl2ext.h>	\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/sounds.c:\n   28  #include \"dEngine.h\"\n   29  #include \"timer.h\"\n   30: #ifdef ANDROID\n   31  #include <AL/al.h>\n   32  #include <AL/alc.h>\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/sounds.h:\n   29  #include \"wavfile.h\"\n   30  #include \"globals.h\"\n   31: #ifdef ANDROID\n   32  #include <AL/al.h>\n   33  #else\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/texture.c:\n   29  #include \"renderer.h\"\n   30  \n   31: #ifdef ANDROID\n   32  #include \"../android/android_utils.h\"\n   33  #endif\n\n46 matches across 24 files\n\n\nSearching 329 files for \"asset\" (case sensitive)\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/android_utils.c:\n   47  static int nextCount;\n   48  \n   49: static jobject assetManager;\n   50  static AAssetManager* mgr;\n   51  \n   52  void Java_com_miadzin_shmup_TouchpadNAActivity_createAssetManager(JNIEnv* env, jclass clazz, jobject aM, jstring apk, jstring sdcard)\n   53  {\n   54:     assetManager = aM;\n   55:     mgr = AAssetManager_fromJava(env, assetManager); \n   56  \n   57      const char* apkPath;\n   ..\n   70  jobject getAssetManager()\n   71  {\n   72:     return assetManager;\n   73  }\n   74  \n   ..\n  190      SLresult result;\n  191  \n  192:     char * filename = strndup(str + 7, sizeof (str) - 7); // GJT: Trim off the \"assets/\" part\n  193  \n  194:     // use asset manager to open asset by filename\n  195      assert(NULL != mgr);\n  196:     //AAsset* asset = AAssetManager_open(mgr, (const char *) utf8, AASSET_MODE_UNKNOWN);\n  197:     AAsset* asset = AAssetManager_open(mgr, (const char *) filename, AASSET_MODE_UNKNOWN);\n  198  \n  199      // release the Java string and UTF-8\n  200      //(*env)->ReleaseStringUTFChars(env, filename, utf8);\n  201  \n  202:     // the asset might not be found\n  203:     if (NULL == asset) {\n  204:         LOGE(\"Could not find sound asset %s\", filename);\n  205          return;\n  206      }\n  207  \n  208:     // open asset as file descriptor\n  209      off_t start, length;\n  210:     int fd = AAsset_openFileDescriptor(asset, &start, &length);\n  211      assert(0 <= fd);\n  212:     AAsset_close(asset);\n  213  \n  214      // configure audio source\n  ...\n  249      SLresult result;\n  250  \n  251:     // make sure the asset audio player was created\n  252      if (NULL != fdPlayerPlay) {\n  253          // set the player's state\n  ...\n  262      SLresult result;\n  263  \n  264:     // make sure the asset audio player was created\n  265      if (NULL != fdPlayerPlay) {\n  266          // set the player's state\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/android_utils.h:\n   13  #include <SLES/OpenSLES_AndroidConfiguration.h>\n   14  \n   15: // for native asset manager\n   16  #include <sys/types.h>\n   17: #include <android/asset_manager.h>\n   18: #include <android/asset_manager_jni.h>\n   19  \n   20  #include <android/log.h>\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/main.c:\n   29  static SLEnvironmentalReverbItf outputMixEnvironmentalReverb = NULL;\n   30  \n   31: static jobject assetManager;\n   32  \n   33  vec2_t commScale;\n   ..\n  237  	engineParameters |= GL_11_RENDERER ;\n  238    \n  239: 	setenv( \"RD\", \"assets\", 1 ); \n  240  	setenv( \"WD\", \"mnt/sdcard/app-data/com.miadzin.shmup\", 1 );\n  241  \n  242: 	assetManager = getAssetManager();\n  243  	\n  244  	renderer.materialQuality = MATERIAL_QUALITY_HIGH;\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/native_app_glue.c:\n   93          case APP_CMD_CONFIG_CHANGED:\n   94              AConfiguration_fromAssetManager(android_app->config,\n   95:                     android_app->activity->assetManager);\n   96              break;\n   97  \n   ..\n  166  \n  167      android_app->config = AConfiguration_new();\n  168:     AConfiguration_fromAssetManager(android_app->config, android_app->activity->assetManager);\n  169  \n  170      android_app->cmdPollSource.id = LOOPER_ID_MAIN;\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/Shmup.sublime-workspace:\n   33  	\"file_history\":\n   34  	[\n   35: 		\"/Users/gjtorikian/Dropbox/workspace/Shelves/assets/html/versions.html\",\n   36: 		\"/Users/gjtorikian/Dropbox/workspace/Shelves/assets/html/about.html\",\n   37  		\"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/main.c\",\n   38  		\"/Users/gjtorikian/Desktop/jg.c\",\n   39: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/models/act1/SkyDome_Night.obj.md5mesh\",\n   40: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials/act1.mtl\",\n   41  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/world.c\",\n   42  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/dEngine.c\",\n   ..\n   47  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/commands.c\",\n   48  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/menu.c\",\n   49: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials/act1_pvr.mtl\",\n   50  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/android/android_utils.c\",\n   51  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/md5.c\",\n   52: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials.lbr\",\n   53  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/entities.c\",\n   54  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/camera.c\",\n\n31 matches across 5 files\n\n\nSearching 329 files for \"printf(\" (case sensitive)\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/android_utils.c:\n  311      memset(sdcardpath,0,MAX_OSPATH);\n  312      \n  313:     sprintf( sdcardpath, \"%s%s\", sdCardPath, filename );\n  314      return sdcardpath;\n  315  }\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/android_utils.h:\n   30  #define  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)\n   31  \n   32: #define printf(fmt,args...)  __android_log_print(ANDROID_LOG_INFO  ,LOG_TAG, fmt, ##args) \n   33  \n   34  /**\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/main.c:\n   71  	NSString *file;\n   72  	while (file = [dirEnum nextObject]) {\n   73: //      printf(\"File extension %s\\n\",[[file pathExtension] cStringUsingEncoding:NSASCIIStringEncoding] );\n   74  		if ([[file pathExtension] isEqualToString: @\"io\"]) {\n   75  			\n   76  			strcpy(replayList[numFile],[file cStringUsingEncoding:NSASCIIStringEncoding]);\n   77: 			printf(\"    - Listing %d [%s]\\n\",numFile,replayList[numFile]);\n   78  			numFile++;\n   79  		}\n   ..\n  514  				if (action == AMOTION_EVENT_ACTION_MOVE) \n  515  				{\n  516: 					//printf(\"m\\n\");\n  517  								LOGI(\"DEBUG MOVE x %f y %f\", touchstate[pointerId].x, touchstate[pointerId].y);\n  518  			//LOGI(\"DEBUG MOVE prevx %f prevy %f\", prev_touchstate[pointerId].x, prev_touchstate[pointerId].y);\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/libpng/png.h:\n  260   * boxes and the like:\n  261   *\n  262:  *     printf(\"%s\",png_get_copyright(NULL));\n  263   *\n  264   * Also, the PNG logo (in PNG format, of course) is supplied in the\n  ...\n  515   * However, the * structure returned by png_get_text() will always contain\n  516   * regular zero-terminated C strings (possibly empty), never NULL pointers,\n  517:  * so they can be safely used in printf() and other string-handling functions.\n  518   */\n  519  typedef struct png_text_struct\n  ...\n 1923   * handling.  They are in the file pngrio.c, pngwio.c, and pngerror.c,\n 1924   * and call standard C I/O routines such as fread(), fwrite(), and\n 1925:  * fprintf().  These functions can be made to use other I/O routines\n 1926   * at run time for those applications that need to handle I/O in a\n 1927   * different manner by calling png_set_???_fn().  See libpng.txt for\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/libpng/pngconf.h:\n 1450  #      endif\n 1451  #    else\n 1452:        /* You don't have or don't want to use snprintf().  Caution: Using\n 1453          * sprintf instead of snprintf exposes your application to accidental\n 1454:         * or malevolent buffer overflows.  If you don't have snprintf()\n 1455          * as a general rule you should provide one (you can get one from\n 1456          * Portable OpenSSH).\n 1457          */\n 1458: #      define png_snprintf(s1,n,fmt,x1) sprintf(s1,fmt,x1)\n 1459: #      define png_snprintf2(s1,n,fmt,x1,x2) sprintf(s1,fmt,x1,x2)\n 1460  #      define png_snprintf6(s1,n,fmt,x1,x2,x3,x4,x5,x6) \\\n 1461:           sprintf(s1,fmt,x1,x2,x3,x4,x5,x6)\n 1462  #    endif\n 1463  #  endif\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/libpng/pngerror.c:\n  271       {\n  272         error_number[offset - 1] = '\\0';\n  273:        fprintf(stderr, \"libpng error no. %s: %s\",\n  274            error_number, error_message + offset + 1);\n  275:        fprintf(stderr, PNG_STRING_NEWLINE);\n  276       }\n  277       else\n  278       {\n  279:        fprintf(stderr, \"libpng error: %s, offset=%d\",\n  280            error_message, offset);\n  281:        fprintf(stderr, PNG_STRING_NEWLINE);\n  282       }\n  283     }\n  ...\n  285  #endif\n  286     {\n  287:       fprintf(stderr, \"libpng error: %s\", error_message);\n  288:       fprintf(stderr, PNG_STRING_NEWLINE);\n  289     }\n  290  #endif\n  ...\n  335       {\n  336         warning_number[offset + 1] = '\\0';\n  337:        fprintf(stderr, \"libpng warning no. %s: %s\",\n  338            warning_number, warning_message + offset);\n  339:        fprintf(stderr, PNG_STRING_NEWLINE);\n  340       }\n  341       else\n  342       {\n  343:        fprintf(stderr, \"libpng warning: %s\",\n  344            warning_message);\n  345:        fprintf(stderr, PNG_STRING_NEWLINE);\n  346       }\n  347     }\n  ...\n  349  #  endif\n  350     {\n  351:      fprintf(stderr, \"libpng warning: %s\", warning_message);\n  352:      fprintf(stderr, PNG_STRING_NEWLINE);\n  353     }\n  354  #else\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/libpng/pngpriv.h:\n  877         { \\\n  878         int num_tabs=l; \\\n  879:        fprintf(PNG_DEBUG_FILE,\"%s\"m PNG_STRING_NEWLINE,(num_tabs==1 ? \"\\t\" : \\\n  880           (num_tabs==2 ? \"\\t\\t\":(num_tabs>2 ? \"\\t\\t\\t\":\"\")))); \\\n  881         }\n  ...\n  885         { \\\n  886         int num_tabs=l; \\\n  887:        fprintf(PNG_DEBUG_FILE,\"%s\"m PNG_STRING_NEWLINE,(num_tabs==1 ? \"\\t\" : \\\n  888           (num_tabs==2 ? \"\\t\\t\":(num_tabs>2 ? \"\\t\\t\\t\":\"\"))),p1); \\\n  889         }\n  ...\n  893         { \\\n  894         int num_tabs=l; \\\n  895:        fprintf(PNG_DEBUG_FILE,\"%s\"m PNG_STRING_NEWLINE,(num_tabs==1 ? \"\\t\" : \\\n  896           (num_tabs==2 ? \"\\t\\t\":(num_tabs>2 ? \"\\t\\t\\t\":\"\"))),p1,p2); \\\n  897         }\n  ...\n  903         int num_tabs=l; \\\n  904         char format[256]; \\\n  905:        snprintf(format,256,\"%s%s%s\",(num_tabs==1 ? \"\\t\" : \\\n  906           (num_tabs==2 ? \"\\t\\t\":(num_tabs>2 ? \"\\t\\t\\t\":\"\"))), \\\n  907           m,PNG_STRING_NEWLINE); \\\n  908:        fprintf(PNG_DEBUG_FILE,format); \\\n  909         }\n  910  #    endif\n  ...\n  914         int num_tabs=l; \\\n  915         char format[256]; \\\n  916:        snprintf(format,256,\"%s%s%s\",(num_tabs==1 ? \"\\t\" : \\\n  917           (num_tabs==2 ? \"\\t\\t\":(num_tabs>2 ? \"\\t\\t\\t\":\"\"))), \\\n  918           m,PNG_STRING_NEWLINE); \\\n  919:        fprintf(PNG_DEBUG_FILE,format,p1); \\\n  920         }\n  921  #    endif\n  ...\n  925         int num_tabs=l; \\\n  926         char format[256]; \\\n  927:        snprintf(format,256,\"%s%s%s\",(num_tabs==1 ? \"\\t\" : \\\n  928           (num_tabs==2 ? \"\\t\\t\":(num_tabs>2 ? \"\\t\\t\\t\":\"\"))), \\\n  929           m,PNG_STRING_NEWLINE); \\\n  930:        fprintf(PNG_DEBUG_FILE,format,p1,p2); \\\n  931         }\n  932  #    endif\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/libpng/pngread.c:\n  130           if (user_png_ver)\n  131           {\n  132:            png_snprintf(msg, 80,\n  133                \"Application was compiled with png.h from libpng-%.20s\",\n  134                user_png_ver);\n  135             png_warning(png_ptr, msg);\n  136           }\n  137:          png_snprintf(msg, 80,\n  138               \"Application  is  running with png.c from libpng-%.20s\",\n  139               png_libpng_ver);\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/libpng/pngrutil.c:\n  274  	    }\n  275  \n  276: 	    png_snprintf(umsg, sizeof umsg, msg, png_ptr->chunk_name);\n  277  	    msg = umsg;\n  278  #else\n  ...\n  372  \n  373  #ifdef PNG_STDIO_SUPPORTED\n  374:       png_snprintf(umsg, sizeof umsg, \"Unknown zTXt compression type %d\", comp_type);\n  375        png_warning(png_ptr, umsg);\n  376  #else\n  ...\n  704             \"Ignoring incorrect gAMA value when sRGB is also present\");\n  705  #ifdef PNG_CONSOLE_IO_SUPPORTED\n  706:          fprintf(stderr, \"gamma = (%d/100000)\", (int)igamma);\n  707  #endif\n  708           return;\n  ...\n  885  #ifdef PNG_CONSOLE_IO_SUPPORTED\n  886  #ifdef PNG_FLOATING_POINT_SUPPORTED\n  887:             fprintf(stderr, \"wx=%f, wy=%f, rx=%f, ry=%f\\n\",\n  888                 white_x, white_y, red_x, red_y);\n  889:             fprintf(stderr, \"gx=%f, gy=%f, bx=%f, by=%f\\n\",\n  890                 green_x, green_y, blue_x, blue_y);\n  891  #else\n  892:             fprintf(stderr, \"wx=%ld, wy=%ld, rx=%ld, ry=%ld\\n\",\n  893                 int_x_white, int_y_white, int_x_red, int_y_red);\n  894:             fprintf(stderr, \"gx=%ld, gy=%ld, bx=%ld, by=%ld\\n\",\n  895                 int_x_green, int_y_green, int_x_blue, int_y_blue);\n  896  #endif\n  ...\n  977  #ifdef PNG_CONSOLE_IO_SUPPORTED\n  978  #  ifdef PNG_FIXED_POINT_SUPPORTED\n  979:          fprintf(stderr, \"incorrect gamma=(%d/100000)\\n\",\n  980              (int)png_ptr->int_gamma);\n  981  #  else\n  982  #    ifdef PNG_FLOATING_POINT_SUPPORTED\n  983:          fprintf(stderr, \"incorrect gamma=%f\\n\", png_ptr->gamma);\n  984  #    endif\n  985  #  endif\n  ...\n 1125      char umsg[50];\n 1126  \n 1127:     png_snprintf(umsg, 50, \"declared profile size = %lu\",\n 1128          (unsigned long)profile_size);\n 1129      png_warning(png_ptr, umsg);\n 1130:     png_snprintf(umsg, 50, \"actual profile length = %lu\",\n 1131          (unsigned long)profile_length);\n 1132      png_warning(png_ptr, umsg);\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/libpng/pngwrite.c:\n  544          if (user_png_ver)\n  545          {\n  546:            png_snprintf(msg, 80,\n  547                \"Application was compiled with png.h from libpng-%.20s\",\n  548                user_png_ver);\n  549             png_warning(png_ptr, msg);\n  550          }\n  551:         png_snprintf(msg, 80,\n  552             \"Application  is  running with png.c from libpng-%.20s\",\n  553             png_libpng_ver);\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/libpng/pngwutil.c:\n  224  #ifdef PNG_STDIO_SUPPORTED\n  225        char msg[50];\n  226:       png_snprintf(msg, 50, \"Unknown compression type %d\", compression);\n  227        png_warning(png_ptr, msg);\n  228  #else\n  ...\n 1257           char msg[40];\n 1258  \n 1259:          png_snprintf(msg, 40,\n 1260             \"invalid keyword character 0x%02X\", (png_byte)*kp);\n 1261           png_warning(png_ptr, msg);\n ....\n 1619  \n 1620     buf[0] = (char)unit;\n 1621:    png_snprintf(buf + 1, 63, \"%12.12e\", width);\n 1622     total_len = 1 + png_strlen(buf + 1) + 1;\n 1623:    png_snprintf(buf + total_len, 64-total_len, \"%12.12e\", height);\n 1624     total_len += png_strlen(buf + total_len);\n 1625  \n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/libzip/zip_close.c:\n  571  	return -1;\n  572  \n  573:     snprintf(buf, sizeof(buf), \"%08lX\", (long)crc);\n  574  \n  575      if (fseeko(out, offset-TORRENT_CRC_LEN, SEEK_SET) < 0) {\n  ...\n  650      }\n  651  \n  652:     sprintf(temp, \"%s.XXXXXX\", za->zn);\n  653  \n  654      if ((tfd=mkstemp(temp)) == -1) {\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/libzip/zip_error_strerror.c:\n   52  \n   53      if (err->zip_err < 0 || err->zip_err >= _zip_nerr_str) {\n   54: 	sprintf(buf, \"Unknown error %d\", err->zip_err);\n   55  	zs = NULL;\n   56  	ss = buf;\n   ..\n   80  	    return _zip_err_str[ZIP_ER_MEMORY];\n   81  	\n   82: 	sprintf(s, \"%s%s%s\",\n   83  		(zs ? zs : \"\"),\n   84  		(zs ? \": \" : \"\"),\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/libzip/zip_error_to_str.c:\n   49  \n   50      if (ze < 0 || ze >= _zip_nerr_str)\n   51: 	return snprintf(buf, len, \"Unknown error %d\", ze);\n   52  \n   53      zs = _zip_err_str[ze];\n   ..\n   66      }\n   67  \n   68:     return snprintf(buf, len, \"%s%s%s\",\n   69  		    zs, (ss ? \": \" : \"\"), (ss ? ss : \"\"));\n   70  }\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/openal/src/Alc/ALc.c:\n  419          LogFile = fopen(str, \"w\");\n  420          if(!LogFile)\n  421:             fprintf(stderr, \"AL lib: Failed to open log file '%s'\\n\", str);\n  422      }\n  423      if(!LogFile)\n  ...\n  607      }                                                                        \\\n  608      alc##type##List = temp;                                                  \\\n  609:     sprintf(alc##type##List+alc##type##ListSize, \"%s\", name);                \\\n  610      alc##type##ListSize += len+1;                                            \\\n  611      alc##type##List[alc##type##ListSize] = 0;                                \\\n  ...\n  628      else fn += 1;\n  629  \n  630:     i = snprintf(str, sizeof(str), \"AL lib: %s:%d: \", fn, line);\n  631      if(i < (int)sizeof(str) && i > 0)\n  632      {\n  633          va_list ap;\n  634          va_start(ap, fmt);\n  635:         vsnprintf(str+i, sizeof(str)-i, fmt, ap);\n  636          va_end(ap);\n  637      }\n  ...\n  641      __android_log_write(ANDROID_LOG_WARN, \"OpenAL\", str);\n  642  #endif\n  643:     fprintf(LogFile, \"%s\", str);\n  644      fflush(LogFile);\n  645  }\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/openal/src/Alc/alcConfig.c:\n  217      {\n  218          size_t p = strlen(buffer);\n  219:         snprintf(buffer+p, sizeof(buffer)-p, \"\\\\alsoft.ini\");\n  220          f = fopen(buffer, \"rt\");\n  221          if(f)\n  ...\n  234      if(getenv(\"HOME\") && *(getenv(\"HOME\")))\n  235      {\n  236:         snprintf(buffer, sizeof(buffer), \"%s/.alsoftrc\", getenv(\"HOME\"));\n  237          f = fopen(buffer, \"r\");\n  238          if(f)\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/camera.c:\n  107  	\n  108  	\n  109: 	//printf(\"CAM_Update\\n\");\n  110: 	//printf(\"camera.currentFrame->next=%d\\n\",camera.currentFrame->next);\n  111: 	//printf(\"camera.currentFrame->next->time=%d\\n\",camera.currentFrame->next->time);\n  112: 	//printf(\"simulationTime=%d\\n\",simulationTime);\n  113  \n  114  	while (camera.currentFrame->next != NULL && camera.currentFrame->next->time <= simulationTime)\n  115  	{\n  116  		//Update vis_set if not already done, take into account key frame_update\n  117: 		//printf(\"Jumping into vis_update().\\n\");\n  118  		VIS_Update();\n  119  		\n  ...\n  123  	}	\n  124  		\n  125: 	//printf(\"frame t=%d.\\n\",camera.currentFrame->time);\n  126  	\n  127  	if (camera.currentFrame->next == 0)\n  ...\n  132  	\n  133  	interpolationFactor = (simulationTime - camera.currentFrame->time) * 1.0 / (nextFrame->time - camera.currentFrame->time);\n  134: 	//printf(\"interpo = %.2f\\n\",interpolationFactor);\n  135  		\n  136  	CAM_InterpolateFrames(camera.currentFrame,nextFrame,interpolationFactor, camera.position, interpolatedQuaterion);\n  ...\n  140  		\n  141  	\n  142: 	//printf(\"Camera pos: [%.2f,%.2f,%.2f].\\n\",camera.position[0],camera.position[1],camera.position[2]);\n  143: 	//printf(\"Camera orientation matrix:\\n\");\n  144  	//matrix_print3x3(interpolatedOrientationMatrix);\n  145: 	//printf(\"Camera orientation quaternion: [%.5f,%.5f,%.5f,%.5f]\\n\",interpolatedQuaterion[0],interpolatedQuaterion[1],interpolatedQuaterion[2],interpolatedQuaterion[3]);\n  146  \n  147  	\n  ...\n  184  	fread(&frame->time, sizeof(frame->time), 1, fileHandle);\n  185  	\n  186: 	//printf(\"time = %d:\",frame->time);\n  187  	\n  188  	fread(&frame->position[X], sizeof(float), 1, fileHandle);\n  ...\n  204  	cameraVisMemSize += worldVisSet->numVisSets * sizeof(entity_visset_t) ;\n  205  	\n  206: //	printf(\"	Reading visSet: isKey=%2d.\\n\",worldVisSet->isKey);\n  207  	\n  208  	for(j=0 ; j < worldVisSet->numVisSets ; j++)\n  ...\n  280  	if (!fileHandle)\n  281  	{\n  282: 		printf(\"[CAM_ReadFileCP2Binary] Could not load binary cp2 (%s).\\n\",filename);\n  283  		return 0;\n  284  	}\n  ...\n  289  	if (strcmp(magicNumber, magicCheck))\n  290  	{\n  291: 		printf(\"[CAM_ReadFileCP2Binary] Found binary cp2 (%s) but magic number check failed.\\n\",filename);\n  292  		return 0;\n  293  	}\n  ...\n  295  	fread(&num_frames, sizeof(num_frames), 1, fileHandle);\n  296  	\n  297: 	printf(\"[CAM_ReadFileCP2Binary] Found %d frames.\\n\",num_frames);\n  298  	\n  299  	frame = &firstFrame ;\n  ...\n  301  	for(i=0 ; i < num_frames ; i++)\n  302  	{\n  303: 		//printf(\"Reading binary frame %d/%d: t=\",i+1,num_frames);\n  304  		frame->next = CAM_ReadFrameCP2Binary(fileHandle);\n  305  		frame= frame->next;\n  ...\n  368  	if (camera.pathFilename[0] == '\\0')\n  369  	{\n  370: 		printf(\"[CAM_LoadPath] No camera path loaded. Aborting.\");\n  371  		exit(0);\n  372  	}\n  ...\n  382  		traceID = rand();\n  383  		memset(binPath, 0, 256);\n  384: 		sprintf(binPath, \"/Users/fabiensanglard/tmp/%i\",traceID);\n  385  		strcat(binPath,\"intro.cp.cp2b\");\n  386  		\n  387  		/*\n  388  		memset(logPath, 0, 256);\n  389: 		sprintf(logPath, \"/Users/fabiensanglard/tmp/%i\",traceID);\n  390  		strcat(logPath,\".log.txt\");\n  391  		*/\n  ...\n  404  	if (camera.path == NULL)\n  405  	{\n  406: 		printf(\"[CAM_LoadPath] Could not load camera path properly. Aborting.\\n\");\n  407  		exit(0);\n  408  	}\n  ...\n  412  	simulationTime = camera.currentFrame->time;\n  413  	\n  414: 	printf(\"[CAM_LoadPath] found and loaded %s.\\n\",camera.pathFilename);\n  415: //	printf(\"Camera path is taking %d kb in main memory.\\n\",cameraVisMemSize/1024);\n  416  	\n  417  }\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/collisions.c:\n  541  		\n  542  		//if (enemy->shouldFlicker = 1)\n  543: 		//	printf(\"Enemy enery = %d.\\n\",enemy->energy );\n  544  \n  545  		if (enemy->energy <= 0)\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/commands.c:\n  330  		ss_sprite_boundaries[RIGHT] = (touches[BUTTON_FIRE].iphone_coo_SysPos[X]  - SS_W/2)*2+ FINGER_SPRITE_SIZE;\n  331  		\n  332: 		printf(\"BUTTON_FIRE_PRESSED\\n\");\n  333  		/*\n  334  		    0 3\n  ...\n  475  				return;\n  476  			\n  477: 			//printf(\"engine.showFingers=%d\\n\",engine.showFingers);\n  478  			\n  479  			if (engine.showFingers)\n  ...\n  547  	if (lastRecordCommand < currentRecordCommand)\n  548  	{\n  549: 		printf(\"Command buffer overflow: stop recording !!\\n\");\n  550  		engine.playback.record = 0;\n  551  		return;\n  ...\n  582  	if (engine.playback.play)\n  583  	{\n  584: 		//printf(\"Next command t=%u.\\n\",currentRecordCommand->time);\n  585  		while (lastRecordCommand > currentRecordCommand && currentRecordCommand->time <= simulationTime) \n  586  		{\n  ...\n  647  	engine.playback.record = 0;\n  648  		\n  649: 	printf(\"[COM_StopRecording] Writing command record to disk.\\n\");\n  650: 	//printf(\"[COM_StartScene] Allocating %lu kb for inputs recording.\\n\",NUM_RECORD_FRAMES*sizeof(commandHistoryElem_t)/1024);\n  651  	\n  652  	ioFileHandle = FS_OpenFile(engine.playback.filename,\"wb\");\n  ...\n  654  	if (!ioFileHandle)\n  655  	{\n  656: 		printf(\"[COM_StopRecording] Unable to create commandHistory file: %s.\\n\",engine.playback.filename);\n  657  		return;\n  658  	}\n  659  	\n  660  	int_numPlayers = numPlayers;\n  661: 	printf(\"Writing numPlayer=%d to file record\\n\",int_numPlayers);\n  662  	fwrite(&int_numPlayers,sizeof(int),1, ioFileHandle->hFile);\n  663  	fwrite(recordCommands, sizeof(command_t), NUM_RECORD_FRAMES, ioFileHandle->hFile);\n  ...\n  678  	if (engine.playback.play && engine.playback.record)\n  679  	{\n  680: 		printf(\"[COM_StartScene] Unable to play and record at the same time: Giving priority to playback.\\n\");\n  681  		engine.playback.record=0;\n  682  	}\n  ...\n  685  	{\n  686  		\n  687: 		printf(\"[COM_StartScene] PLAYING BACK VIDEO: \");\n  688  		\n  689  		filename[0] = '\\0';\n  ...\n  697  			engine.playback.play = 0;\n  698  			//FS_CloseFile(ioFileHandle);\n  699: 			printf(\"[COM_StartScene] Cannot start playback: io file missing.\\n\");\n  700  			return;\n  701  		}\n  ...\n  703  		numPlayers = *((int*)ioFileHandle->ptrStart);\n  704  		\n  705: 		printf(\"Found %d players in this playback.\\n\",numPlayers);\n  706  		\n  707  		//recordCommands = calloc(NUM_RECORD_FRAMES, sizeof(command_t));\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/config.c:\n   38  	if (!cfgFile)\n   39  	{\n   40: 		printf(\"[CFG_Load] Unable to find player settings file, creating it.\\n\");\n   41  		CFG_Save();\n   42  		CFG_Load();\n   ..\n   48  	if(strncmp(cfgFile->filedata, cfgMagicNumber, strlen(cfgMagicNumber)));\n   49  	{\n   50: 		printf(\"[CFG_Load] Magic number check failed.\\n\");\n   51  		return;\n   52  	}\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/dEngine.c:\n   72  	if (!config)\n   73  	{\n   74: 		printf(\"Configuration file: data/config.cfg not found\");\n   75  		exit(0);\n   76  	}\n   ..\n   85  		LE_readToken();\n   86  \n   87: 		//printf(\"Current token = '%s'.\\n\",LE_getCurrentToken());\n   88  		if (!strcmp(\"renderer\", LE_getCurrentToken()))\n   89  		{\n   ..\n  120  					strcpy(engine.scenes[currentSceneId].path, LE_getCurrentToken());\n  121  					\n  122: 					printf(\"Read scene %d, name %s, path %s\\n\",currentSceneId,engine.scenes[currentSceneId].name,engine.scenes[currentSceneId].path);\n  123  					\n  124  					\n  ...\n  278  	/*\n  279  	char num[64];\n  280: 	sprintf(num, \"scene%05d_t=%05d\",engine.sceneId, simulationTime);\n  281  	memset(fullPath, 256, sizeof(char));\n  282  	strcat(fullPath,directory);\n  ...\n  285  	*/\n  286  	fullPath[0] = '\\0';\n  287: 	sprintf(fullPath,\"%sscene%05d_t=%05d.tga\",directory,engine.sceneId, simulationTime);\n  288  	\n  289  	\n  ...\n  388  	unsigned long ul = ULONG_MAX;\n  389  	\n  390: 	printf(\"\\n\");\n  391: 	printf(\"LIMITS: c:%d, uc:%u, s:%d, us:%u\\n\"\n  392  		   \"LIMITS: i:%d, ui:%u, l:%ld, ul:%lu\\n\",\n  393  		   c, uc, s, us, i, ui, l, ul);\n  394  	\n  395  	// promotion \n  396: 	printf(\"\\n\");\n  397: 	printf(\"i = s: %d, \\n\", i = s);\n  398: 	printf(\"i = us: %d, \\n\", i = us);\n  399: 	printf(\"ui = s: %u, \\n\", ui = s);\n  400: 	printf(\"ui = us: %u\\n\", ui = us);\n  401  	\n  402  	// narrowing \n  403: 	printf(\"\\n\");\n  404: 	printf(\"c = s: %d, \\n\", c = s);\n  405: 	printf(\"c = us: %d, \\n\", c = us);\n  406: 	printf(\"uc = s: %d, \\n\", uc = s); //Ln:31\n  407: 	printf(\"uc = us: %d\\n\", uc = us);\n  408  	\n  409: 	printf(\"\\n\");\n  410: 	printf(\"uc = UCHAR_MAX (%u) + 1: %u, \\n\",\n  411  		   UCHAR_MAX, uc = UCHAR_MAX + 1); // Ln:36 \n  412: 	printf(\"uc = -1: %d\\n\", uc = -1);\n  413  	*/\n  414  	\n  ...\n  435  	event_t* ev;\n  436  	\n  437: 	printf(\"[dEngine_LoadScene] sceneid=(%d)\\n\",sceneId);\n  438  	\n  439  	COM_StopRecording();\n  ...\n  550  			while (event->next != NULL && event->next->time <= timeJumpTarget && event->next->type == EV_SPAWN_ENEMY)\n  551  			{\n  552: 				//printf(\"[dEngine_JumpInTime] Cleaning EV_SPAWN_ENEMY events t=%d.\\n\",event->next->time);\n  553  				\n  554  				toDelete = event->next;\n  ...\n  563  		}\n  564  		\n  565: 	//	printf(\"[dEngine_JumpInTime] events cleaned.\\n\");\n  566  		\n  567  		while (simulationTime < timeJumpTarget) \n  ...\n  573  			\n  574  			//Play all frames\n  575: 		//	printf(\"[dEngine_JumpInTime] t=%d.\\n\",simulationTime);\n  576  			dEngine_HostFrame();\n  577  		}\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/enemy.c:\n   94  	if (numFreeEnemies == 0)\n   95  	{\n   96: 		printf(\"Enemy pool exhausted (%d). Aborting.\\n\",MAX_NUM_ENEMIES);\n   97  		return &dummyEnemy;\n   98  	}\n   ..\n  184  		{\n  185  			engine.playerStats.numEnemies++;\n  186: 			//printf(\"precache t=%denemy count %f.\\n\",precacheEvent->time,engine.playerStats.numEnemies);\n  187  			eventEnemyPayload = precacheEvent->payload;\n  188: 			//printf(\"Precaching entity: %s.\\n\",enemyTypePath[eventEnemyPayload->type]);\n  189  			ENT_LoadEntity(&dummy, enemyTypePath[eventEnemyPayload->type],ENT_FULL_DRAW);\n  190  		}\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/enemy_particules.c:\n  153  		interpolation = 1- currParticule->ttl / currParticule->originalTTL ;\n  154  		\n  155: 		//printf(\"interpolation = %.2f\\n\",interpolation );\n  156  		\n  157  		delta[X] = partLib.particules[i].posDiff[X] * interpolation;\n  ...\n  192  		\n  193  		/*\n  194: 		printf(\"part %d UP=%d DOWN=%d LEFT=%d RIGHT=%d\\n\",\n  195  			   i,\n  196  			   currParticule->ss_boudaries[UP],\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/entities.c:\n   68  		while(cursorBucket != NULL)\n   69  		{\n   70: 			printf(\"Dumping mesh '%s'.\\n\",cursorBucket->name);\n   71  			mesh= cursorBucket->mesh;\n   72  \n   73  			currentVertex = mesh->vertexArray;\n   74: 			printf(\"Listing Vertices.\\n\");\n   75  \n   76  			for (i=0; i < mesh->numVertices ; i++,currentVertex++) \n   77  			{\n   78: 				printf(\"vertex: %d/%hu  (norm: %hd , %hd , %hd ) (text: %hd , %hd ) (pos: %f , %f , %f )\\n\",\n   79  					   i,\n   80  					   mesh->numVertices-1,   \n   ..\n   91  \n   92  \n   93: 			printf(\"Listing indices.\\n\");\n   94  			for(i=0;  i < mesh->numIndices ; i++)\n   95  			{\n   96: 				printf(\"indice: %d/%hu, vertex: %hu   (norm: %hd , %hd , %hd ) (text: %hd , %hd ) (pos: %f , %f , %f )\\n\",\n   97  					   i,\n   98  					   mesh->numIndices-1,   \n   ..\n  253  	{\n  254  		entity->model = meshCache ;\n  255: 		//printf(\"[ENT_LoadEntity] Cache hit MD5 '%s'.\\n\",filename);\n  256  	}\n  257  	else \n  ...\n  274  	if (!entity->material)\n  275  	{\n  276: 		printf(\"[ENT_LoadEntity *****ERROR******] Unknown material: '%s'.\\n\",entity->model->materialName);\n  277  	}\n  278  	\n  ...\n  320  	\n  321  	\n  322: //	printf(\"bbox min: [%.2f,%.2f,%.2f]\\n\", worldSpaceMinPoint[0], worldSpaceMinPoint[1], worldSpaceMinPoint[2]);\n  323: //	printf(\"bbox max: [%.2f,%.2f,%.2f]\\n\", worldSpaceMaxPoint[0], worldSpaceMaxPoint[1], worldSpaceMaxPoint[2]);\n  324  	\n  325  	//Generate 6 points defining the box limits.\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/event.c:\n   67  	matrix_multiply(projectionMatrix, viewMatrix, globalMatrix);\n   68  	\n   69: 	printf(\"[EV_AttachToCamera]\\n\");\n   70  	P_AttachToCamera(globalMatrix);\n   71  	ENE_AttachToCamera(globalMatrix);\n   ..\n  113  	\n  114  	\n  115: 	//printf(\"Angle = %.2f\\n\",enemy->spawn_angle);\n  116  	\n  117  \n  ...\n  204  void EV_ShowProlog(event_t* event)\n  205  {\n  206: 	//printf(\"EV_ShowProlog()\\n\");\n  207  	event_title_payload_t* pl;\n  208  	pl = event->payload;\n  ...\n  212  void EV_ShowEpilog(event_t* event)\n  213  {\n  214: 	//printf(\"EV_ShowEpilog()\\n\");\n  215  	event_title_payload_t* pl;\n  216  	pl = event->payload;\n  ...\n  234  	dEngine_RequireSceneId(payload->sceneId);\n  235  	\n  236: 	printf(\"[EV_RequestScene] engine.requiredSceneId =%d.\\n\",engine.requiredSceneId );\n  237  }\n  238  \n  ...\n  260  		\n  261  		players[i].autopilot.end_ss_position[Y] = -0.3;\n  262: 		//printf(\"player %d end_ss_position[%.2f,%.2f]\\n\",players[i].autopilot.end_ss_position[X],players[i].autopilot.end_ss_position[Y]);\n  263  		players[i].autopilot.diff_ss_position[X] = players[i].ss_position[X] - players[i].autopilot.end_ss_position[X];\n  264  		players[i].autopilot.diff_ss_position[Y] = players[i].ss_position[Y] - players[i].autopilot.end_ss_position[Y];\n  ...\n  366  		while (event->next != NULL && event->next->type == EV_SPAWN_ENEMY)\n  367  		{\n  368: 			//printf(\"[dEngine_JumpInTime] Cleaning EV_SPAWN_ENEMY events t=%d.\\n\",event->next->time);\n  369  			\n  370  			toDelete = event->next;\n  ...\n  417  	nextEvent = &events;\n  418  	\n  419: 	printf(\"EV_InitForScene\\n\");\n  420  }\n  421  \n  ...\n  454  	\n  455  	//if (nextEvent != NULL)\n  456: 	//	printf(\"next event t=%d.\\n\",nextEvent->time);\n  457  	\n  458  	while (nextEvent != NULL && nextEvent->time < simulationTime) \n  459  	{\n  460: 		//printf(\"Triggering event t=%d type: %d.\\n\",nextEvent->time,nextEvent->type);\n  461  		eventToFunction[nextEvent->type](nextEvent);\n  462  		\n  ...\n  519  		{\n  520  			time = LE_readReal();\n  521: 			//printf(\"settime=%d.\\n\",time);\n  522  		}\n  523  		else\n  ...\n  529  		{\n  530  			ttl = LE_readReal();\n  531: 			//printf(\"ttl=%.2f.\\n\",ttl);\n  532  		}		\n  533  		else if (!strcmp(\"at\", LE_getCurrentToken()))\n  ...\n  535  			at = time + LE_readReal();\n  536  		\n  537: 			//printf(\"Fount enemy at %d.\\n\",at);\n  538  		\n  539  			LE_readToken();\n  ...\n  550  					LE_readToken();\n  551  					numEnemies= LE_readReal();\n  552: 					//printf(\"Fount %d enemies.\\n\",numEnemies);\n  553  				\n  554  					//enemyType\n  555  					LE_readToken();\n  556  					enemyType = LE_readReal();\n  557: 					//printf(\"Fount enemyType %d.\\n\",enemyType);\n  558  				\n  559  					//percentageInvulnerable\n  ...\n  630  						LE_readToken();\n  631  						eventPayload->parameters[PARAMETER_LEE_START_ANGLE] = 2*M_PI/360 * LE_readReal();\n  632: 					//	printf(\"eventPayload->parameters[PARAMETER_LEE_START_ANGLE]=%.2f\\n\",eventPayload->parameters[PARAMETER_LEE_START_ANGLE]);\n  633  						LE_readToken();\n  634  						eventPayload->parameters[PARAMETER_LEE_FIRE_FREQUENCY] = LE_readReal();\n  ...\n  718  				EV_AddEvent(event);\n  719  			}\n  720: 			//printf(\"t=%d enemyType=%d\\n\",event->time,eventPayload->type);\n  721  		}\n  722  		LE_readToken(); \n  ...\n  772  			\n  773  			//Acquired event\n  774: 		//	printf(\"[EV_ReadTextsEvents] at %d: %s\\n\",event->time,payload->text);\n  775  			EV_AddEvent(event);\n  776  		}\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/fht.c:\n   66  	enemy->entity.yAxisRot = f * FHT_NUM_ROTATION * 2.0f * M_PI;\n   67  	\n   68: 	//printf(\"f=%.2f\\n\",f);\n   69  	\n   70  	enemy->ss_position[X] = oneMinusF*oneMinusF * enemy->spawn_startPosition[X] + 2*oneMinusF*f*enemy->spawn_controlPoint[X]+ f*f*enemy->spawn_endPosition[X];\n   ..\n  100  	//enemy->ss_position[Y] = (1-f)*  enemy->spawn_startPosition[Y] ;\n  101  	\n  102: 	//printf(\"ene pso = %.2f, %.2f.\\n\",enemy->ss_position[X],enemy->ss_position[Y]);\n  103  	\n  104  	\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/filesystem.c:\n   40  	char *p;\n   41  	p = getenv(\"RD\");\n   42: 	sprintf( fs_gamedir, \"%s\", p );\n   43: 	//printf(\"[Filesystem] Base    directory initialized (%s).\\n\",fs_gamedir);\n   44  	\n   45  	p = getenv(\"WD\");\\\n   46: 	sprintf( fs_writableDir, \"%s\", p );\n   47: 	//printf(\"[Filesystem] Writable directory initialized (%s).\\n\",fs_writableDir);\n   48  	\n   49: 	//printf(\"[Filesystem] Base directory = '%s'.\\n\",fs_gamedir);\n   50  	\n   51: 	printf(\"[Filesystem] Initialized.\\n\");\n   52  }\n   53  \n   ..\n   96  		pathBase = FS_Gamedir();\n   97  	\n   98: 	sprintf( netpath, \"%s/%s\", pathBase, filename );\n   99  	\n  100  	#if (!ANDROID) && (!WRITING)\n  ...\n  102  \n  103  	if ( !fd  ) {\n  104: 		printf(\"[FS_OpenFile] Could not open file '%s'\\n\",netpath);\n  105  		return NULL;\n  106  	}\n  ...\n  147  	//if (!strcmp(\"data/scenes/techDemo.scene\", filename))\n  148  	//{\n  149: 	//	printf(\"techDemo.scene filesize = %d\",hFile->filesize);\n  150  	//}\n  151  	\n  ...\n  169  	hFile->isWritable = isWriting;\n  170  	hFile->hFile = fd;\n  171: 	//printf(\"Closing file: '%s'\\n\",netpath);\n  172  	\n  173  \n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/fx.c:\n  772  	}\n  773  	\n  774: 	//printf(\"numSmokeIndices=%d.\\n\",numSmokeIndices);\n  775  }\n  776  \n  ...\n  809  	\n  810  	\n  811: 	//printf(\"smoke t=%d.\\n\",smoke->type);\n  812  	\n  813  	if (ss_sizeX == 0)\n  ...\n  940  void FX_ReleaseSmoke(smoke_t* smoke)\n  941  {\n  942: 	//printf(\"[FX_ReleaseSmoke] numFreeSmokes=%d\\n\",numFreeSmokes);\n  943  	freeSmokes[numFreeSmokes] = smoke;\n  944  	numFreeSmokes++;\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/ItextureLoader.c:\n   72  	\n   73  	\n   74: 	//printf(\"[loadNativePVRT] Loading '%s'\\n\",texture->path);\n   75  	texture->file = FS_OpenFile(texture->path,\"rb\");\n   76  	\n   77  	if (!texture->file)\n   78  	{\n   79: 		printf(\"[loadNativePVRT] Could not load: '%s'\\n\",texture->path);\n   80  		return;\n   81  	}\n   ..\n   97  		gPVRTexIdentifier[3] != ((pvrTag >> 24) & 0xff))\n   98  	{\n   99: 		printf(\"PVR file '%s' failed magic number check.\\n\",texture->path);\n  100  		return ;\n  101  	}\n  102  	\n  103  	texture->numMipmaps = pvrHeader->numMipmaps + 1;\n  104: 	printf(\"Texture %s has %d mipmaps.\\n\",texture->path,texture->numMipmaps);\n  105  	\n  106  	texture->data =       malloc(texture->numMipmaps * sizeof(ubyte*)) ;\n  ...\n  123  			{\n  124  				texture->format = GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n  125: 				//printf(\"GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG.\\n\");\n  126  			}\n  127  			else// if (formatFlags == kPVRTextureFlagTypePVRTC_2)\n  128  			{\n  129  				texture->format = GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n  130: 				//printf(\"GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG.\\n\");\n  131  			}\n  132  		}\n  ...\n  137  			{\n  138  				texture->format = GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n  139: 			//	printf(\"GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG.\\n\");\n  140  			}\n  141  			else// if (formatFlags == kPVRTextureFlagTypePVRTC_2)\n  142  			{\n  143  				texture->format = GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n  144: 			//	printf(\"GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG.\\n\");\n  145  			}\n  146  		}\n  ...\n  155  		\n  156  	\n  157: 	//	printf(\"File total size is %lu bytes.\\n\",texture->file->filesize);\n  158: 	//	printf(\"Payload is %d bytes.\\n\",texture->file->ptrEnd - pvrDataStart);\n  159  		\n  160  	//	if (!strcmp(texture->path, \"data/models/misc/evil.obj.md5mesh\"))\n  161: 	//		printf(\"DEVIL !.\\n\");\n  162  		\n  163  		\n  ...\n  195  \n  196  			\n  197: 			//printf(\"Mippmap %d is %d bytes.\\n\",texture->numMipmaps,texture->dataLength[texture->numMipmaps]);\n  198  			\n  199  			pvrDataStart += texture->dataLength[texture->numMipmaps];\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/lee.c:\n  184  		enemy->state  = STATE_LEE_SHOOT;\n  185  	\n  186: 	//printf(\"f=%.2f\\n\",f);\n  187  	\n  188  	// Prepare bullet has X phases:\n  ...\n  211  		ss_boundaries[RIGHT] =   enemy->ss_position[X] * SS_W + f *WHITE_PRE_BULLET_SIZE /2 * SS_H;\n  212  		\n  213: 		//printf(\"enemy->ss_position[X] = %h , enemy->ss_position[Y] = %h\\n\",);\n  214: 		//printf(\"U=%d L=%d R=%d D=%d\\n\",ss_boundaries[UP],ss_boundaries[LEFT],ss_boundaries[RIGHT],ss_boundaries[DOWN]);\n  215  		\n  216  		//f *= 255;\n  ...\n  413  	enemy->ss_position[Y] = f * sinf(angle+ M_PI+ M_PI/2) * 1.3f;\n  414  	\n  415: 	//printf(\"enemy id:%d, angleparam=%.2f\\n\",enemy->parameters[PARAMETER_LEE_START_ANGLE]);\n  416: 	//printf(\"enemy id:%d, angle=%.2f ss_pos[X]=%.2f,ss_pos[Y]=%.2f\\n\",enemy->uniqueId,enemy->parameters[PARAMETER_LEE_START_ANGLE]+angle,enemy->ss_position[X],enemy->ss_position[Y]);\n  417  	//enemy->ss_position[X] = (1-f)*  enemy->spawn_startPosition[X] ;\n  418  	//enemy->ss_position[Y] = (1-f)*  enemy->spawn_startPosition[Y] ;\n  419  	\n  420: 	//printf(\"ene pso = %.2f, %.2f.\\n\",enemy->ss_position[X],enemy->ss_position[Y]);\n  421  	\n  422  	\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/lofb.c:\n   42  		//enemy->ss_position[Y] =0;//+= 0.002*sinf( (enemy->uniqueId + enemy->timeCounter / (float)2000) * 4 * 2 * M_PI);\n   43  		\n   44: 		//printf(\"lofb !!\\n\");\n   45  		\n   46  		//lofb_states[enemy->state](enemy);\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/material.c:\n  115  		else\n  116  		{\n  117: 			//printf(\"[MATLIB_Get    ] Cache hit MAT '%s'.\\n\",materialName);\n  118  			return bucket->material;\n  119  		}\n  ...\n  129  	mat_bucket_t* curr;\n  130  	\n  131: 	printf(\"	--Material cache--\\n\");\n  132  	\n  133  	for (i=0; i< SIZE_MAT_HASHTABLE; i++) \n  ...\n  136  		while (curr != NULL) \n  137  		{\n  138: 			printf(\"	Mat (%d) = '%s' loaded=%d\\n\",i,curr->material->name,curr->material->textures[TEXTURE_DIFFUSE].memLocation == TEXT_MEM_LOC_VRAM);\n  139  			curr=curr->next;\n  140  		}\n  141  	}\n  142  	\n  143: 	printf(\"	--END Material cache END --\\n\");\n  144  }\n  145  \n  ...\n  153  	if (strlen(materialName) > MAX_MATERIAL_NAME_LENGTH-1)\n  154  	{\n  155: 		printf(\"Material name '%s' is too long (> %d).\\n\",materialName,MAX_MATERIAL_NAME_LENGTH-1);\n  156  		return NULL;\n  157  	}\n  158  	\n  159: 	//printf(\"[MATLIB]: Creating '%s' \\n\",materialName);\n  160  	material = calloc(1, sizeof(material_t));\n  161  	\n  ...\n  184  		if (*materialName != '\"')\n  185  		{\n  186: 		//	printf(\"material->name = '%s'\\n\",  material->name);\n  187: 			//printf(\"'%c'\\n\",*materialName);\n  188  			*newMaterialName++ = *materialName++;\n  189  		}\n  ...\n  193  	//*newMaterialName = '\\0';\n  194  	\n  195: 	//printf(\"Null termination char= '%d'\\n\",'\\0');\n  196  	\n  197  	MAT_Put(material);\n  198  	\n  199: 	//printf(\"[MATLIB]: Created and cached '%s' \\n\",material->name);\n  200  	\n  201  	return material;\n  ...\n  216  {\n  217  	\n  218: 	printf(\"prop for %X %1d%1d%1d%1d%1d%1d%1d%1d\\n\",\n  219  		   props,\n  220  		   (props & PROP_SHADOW) >> 7,\n  ...\n  227  		   (props & PROP_BUMP)\n  228  		   );\n  229: 	if ((props & PROP_BUMP) == PROP_BUMP) printf(\"PROP_BUMP\\n\");\n  230: 	if ((props & PROP_SPEC) == PROP_SPEC) printf(\"PROP_SPEC\\n\");\n  231: 	if ((props & PROP_DIFF) == PROP_DIFF) printf(\"PROP_DIFF\\n\");\n  232: 	if ((props & PROP_UNDEF1) == PROP_UNDEF1) printf(\"PROP_UNDEF1\\n\");\n  233: 	if ((props & PROP_UNDEF2) == PROP_UNDEF2) printf(\"PROP_UNDEF2\\n\");\n  234: 	if ((props & PROP_UNDEF3) == PROP_UNDEF3) printf(\"PROP_UNDEF3\\n\");\n  235: 	if ((props & PROP_BUMP) == PROP_BUMP) printf(\"PROP_BUMP\\\\n\");\n  236: 	if ((props & PROP_SHADOW) == PROP_SHADOW) printf(\"PROP_SHADOW\\n\");\n  237  }\n  238  \n  ...\n  244  	filehandle_t* library;\n  245  	\n  246: 	printf(\"Initalizing material library.\\n\");\n  247  	\n  248  	for (i=0 ; i < SIZE_MAT_HASHTABLE ; i++)\n  ...\n  320  	if (!mtlFile)\n  321  	{\n  322: 		printf(\"Material loader could not find file '%s'\",mtlPath);\n  323  		return;\n  324  	}\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/math_shmup.c:\n   53  	\n   54  	ilength = InvSqrt(v[ 0 ] * v[ 0 ] + v[ 1 ] * v[ 1 ] + v[ 2 ] * v[ 2 ]);\n   55: //	printf(\"Length = %.3f\\n\",length);\n   56  	\n   57  	//if( length )\n   ..\n   70  	//length = (float)sqrt( v[ 0 ] * v[ 0 ] + v[ 1 ] * v[ 1 ] );\n   71  	ilength = InvSqrt(v[ 0 ] * v[ 0 ] + v[ 1 ] * v[ 1 ]);\n   72: 	//	printf(\"Length = %.3f\\n\",length);\n   73  	\n   74  	//if( length )\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/matrix.c:\n  126  	int i,j;\n  127  	\n  128: 	printf(\"-----------------\\n\");\n  129  	for( i = 0 ; i < 4 ; i++)		//Column dest\n  130  	{\n  ...\n  132  		{\n  133  			// m1 j row * m2 i column\n  134: 			printf(\" %.4f \", m[i+j*4]);\n  135  		}\n  136: 		printf(\"\\n\");\n  137  	}\n  138: 	printf(\"-----------------\\n\");\n  139  }\n  140  \n  ...\n  144  	int i,j;\n  145  	\n  146: 	printf(\"-----------------\\n\");\n  147  	for( i = 0 ; i < 3 ; i++)		//Column dest\n  148  	{\n  ...\n  150  		{\n  151  			// m1 j row * m2 i column\n  152: 			printf(\" %.4f \", m[i+j*3]);\n  153  		}\n  154: 		printf(\"\\n\");\n  155  	}\n  156: 	printf(\"-----------------\\n\");\n  157  }\n  158  \n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/md5.c:\n   91  \n   92  	\n   93: 	//printf(\"\\nGenerating normal and tangents.\\n\");\n   94  \n   95  	\n   ..\n  160  		\n  161  		normalize(normalAccumulator[verticesCounter]);\n  162: //		printf(\"normalized accumulated normal [%d][%.2f,%.2f,%.2f]\\n\",verticesCounter,normalAccumulator[verticesCounter][0],normalAccumulator[verticesCounter][1],normalAccumulator[verticesCounter][2]);\n  163  		normalize(tangentAccumulator[verticesCounter]);\n  164: //		printf(\"normalized accumulated tangent [%d][%.2f,%.2f,%.2f]\\n\",verticesCounter,tangentAccumulator[verticesCounter][0],tangentAccumulator[verticesCounter][1],tangentAccumulator[verticesCounter][2]);\n  165  	}\n  166  	\n  ...\n  215  	vertex_t* currentVertex;\n  216  	\n  217: 	//printf(\"\\nGenerating weight positions.\\n\");\n  218  	\n  219  	// Generate weight position in modelSpace\n  ...\n  226  		\n  227  		\n  228: //		printf(\"weight[%d].pos=[%.2f,%.2f,%.2f]\\n\",i,bone->position[0],bone->position[1],bone->position[2]);\n  229: //		printf(\"weight[%d].pos=[%.2f,%.2f,%.2f]\\n\",i,weight->modelSpacePos[0],weight->modelSpacePos[1],weight->modelSpacePos[2]);\n  230  		\n  231  		Quat_rotateShortPoint (bone->orientation, weight->boneSpaceNormal, weight->modelSpaceNormal);\n  ...\n  261  		}\n  262  		\n  263: //		printf(\"currentVertex[%d].pos=[%.2f,%.2f,%.2f]\\n\",i,currentVertex->pos[0],currentVertex->pos[1],currentVertex->pos[2]);\n  264  		\n  265  		//Need to normalize normal\n  266  		normalize(normalAccumulator);\n  267  		vectorScale(normalAccumulator,32767,currentVertex->normal);\n  268: //		printf(\"currentVertex[%d].normal=[%hu,%hu,%hu]\\n\",i,currentVertex->normal[0],currentVertex->normal[1],currentVertex->normal[2]);\n  269  \n  270  		normalize(tangentAccumulator);\n  271  		vectorScale(tangentAccumulator,32767,currentVertex->tangent);\n  272: //		printf(\"currentVertex[%d].tangent=[%hu,%hu,%hu]\\n\",i,currentVertex->tangent[0],currentVertex->tangent[1],currentVertex->tangent[2]);	\n  273  		\n  274  		currentVertex++;\n  ...\n  303  		\n  304  			mesh->numVertices = LE_readReal();\n  305: 			//printf(\"[MD5_ReadMesh] Found numverts: %d.\\n\",mesh->numVertices);\n  306  			mesh->vertices = (md5_vertex_t*)calloc(mesh->numVertices, sizeof(md5_vertex_t));\n  307  			vertex = mesh->vertices;\n  ...\n  315  				vertex->count = LE_readReal();\n  316  				\n  317: 				//printf(\"MD5 Read vertex: uv[%hu,%hu] st,count[%d,%d]\\n\",vertex->st[0],vertex->st[2],vertex->start,vertex->count);\n  318  				\n  319  			}\n  ...\n  325  			\n  326  			mesh->numTriangles = LE_readReal();\n  327: 			//printf(\"[MD5_ReadMesh] Found numtris: %d.\\n\",mesh->numTriangles);\n  328  			\n  329  			mesh->triangles = (md5_triangle_t*)calloc(mesh->numTriangles, sizeof(md5_triangle_t));\n  ...\n  337  				triangle->index[2] = LE_readReal();\n  338  				\n  339: 				//printf(\"MD5 Read tri: [%hu,%hu,%hu]\\n\",triangle->index[0],triangle->index[1],triangle->index[2]);\n  340  			}\n  341  		}\n  ...\n  345  			\n  346  			mesh->numWeights = LE_readReal();\n  347: 			//printf(\"[MD5_ReadMesh] Found numweights: %d.\\n\",mesh->numWeights);\n  348  			\n  349  			mesh->weights = (md5_weight_t*)calloc(mesh->numWeights, sizeof(md5_weight_t));\n  ...\n  359  				weight->boneSpacePos[2] = LE_readReal();\n  360  				\n  361: 				//printf(\"MD5 Read weight: Boneid[%d] f[%.2f]  boneSpace[%.2f,%.2f,%.2f]\\n\",weight->boneId,weight->bias,weight->boneSpacePos[0],weight->boneSpacePos[1],weight->boneSpacePos[2]);\n  362  			}\n  363  		}\n  ...\n  426  	\n  427  	\n  428: 	//printf(\"Bounding box: min=[%f,%f,%f],max=[%f,%f,%f].\\n\",entity->modelSpacebbox.min[0],entity->modelSpacebbox.min[1],entity->modelSpacebbox.min[2],entity->modelSpacebbox.max[0],entity->modelSpacebbox.max[1],entity->modelSpacebbox.max[2]);\n  429  }\n  430  \n  ...\n  454  	mesh->memLocation = MD5_MEMLOC_RAM;\n  455  	\n  456: 	//printf(\"[MD5_LoadEntity] Loading MD5 '%s' .\\n\",filename); \n  457  \n  458  	\n  ...\n  476  			mesh->numBones = LE_readReal();\n  477  			mesh->bones = (md5_bone_t*)calloc(mesh->numBones,sizeof(md5_bone_t));\n  478: 			//printf(\"[MD5_LoadEntity] Found numJoints: %d.\\n\",mesh->numBones);\n  479  		}\n  480  		else\n  481  		if (!strcmp(\"mesh\", LE_getCurrentToken()))\n  482  		{\n  483: 			//printf(\"[MD5_LoadEntity] Found mesh.\\n\");\n  484  			MD5_ReadMesh(mesh);  \n  485  		}\n  ...\n  487  		if (!strcmp(\"numMeshes\", LE_getCurrentToken()))\n  488  		{\n  489: 			//printf(\"[MD5_LoadEntity] Found numMeshes.\\n\");\n  490  			if(LE_readReal() > 1)\n  491  			{\n  492: 				printf(\"[MD5_Loader ERROR] %s has more than one mesh: Not supported.\\n\",filename);\n  493  				return 0;\n  494  			}\n  ...\n  497  		if (!strcmp(\"joints\", LE_getCurrentToken()))\n  498  		{\n  499: 			//printf(\"[MD5_LoadEntity] Found joints.\\n\");\n  500  			MD5_ReadJoints(mesh->bones,mesh->numBones);\n  501  		}		   \n  ...\n  526  	}\n  527  	\n  528: 	//printf(\"[MD5 Loader] %d vertices.\\n\",mesh->numVertices);\n  529: 	//printf(\"[MD5 Loader] %d triangles.\\n\",mesh->numTriangles);\n  530: 	//printf(\"[MD5 Loader] %d indices.\\n\",mesh->numIndices);\n  531  	\n  532  	\n  ...\n  544  	{\n  545  		currentVertex = mesh->vertexArray;\n  546: 		printf(\"Listing Vertices.\\n\");\n  547  		for (i=0; i < mesh->numVertices ; i++,currentVertex++) \n  548  		{\n  549: 			printf(\"vertex: %d/%hu  (norm: %hd , %hd , %hd ) (text: %hd , %hd ) (pos: %f , %f , %f )\\n\",\n  550  				   i,\n  551  				   mesh->numVertices-1,   \n  ...\n  562  \n  563  \n  564: 		printf(\"Listing indices.\\n\");\n  565  		for(i=0;  i < mesh->numIndices ; i++)\n  566  		{\n  567: 			printf(\"indice: %d/%hu, vertex: %hu   (norm: %hd , %hd , %hd ) (text: %hd , %hd ) (pos: %f , %f , %f )\\n\",\n  568  				   i,\n  569  				   mesh->numIndices-1,   \n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/menu.c:\n  263  	\n  264  	//Free all texts char* for buttons\n  265: 	printf(\"[MENU_UpdateReplayList] MEMORY LEAK HERE !!\\n\");\n  266  	/*\n  267  	if (screen->numButtons > 2 )\n  ...\n  297  		\n  298  		actId = (replayList[i][0] -48)*10 + (replayList[i][1] -48)  ;\n  299: 		printf(\"actId=%d\\n\",actId);\n  300  		if (actId >= engine.numScenes)\n  301  			continue;\n  ...\n  318  {\n  319  	engine.playback.record = !engine.playback.record;\n  320: 	printf(\"[Action_ChangeReplayRecordingState] engine.playback.record=%d\\n\",engine.playback.record);\n  321  	MENU_UpdateReplayList();\n  322  }\n  ...\n  329  	menu_screen_t* currentMenu;\n  330  	\n  331: 	//printf(\"MENU_Set(%d)\\n\",menuId);\n  332  	\n  333  	\n  ...\n  532  		return;\n  533  	\n  534: 	printf(\"[Menu System] Initialized.\\n\");\n  535  	\n  536  	memset(menuScreens,0,sizeof(menuScreens));\n  ...\n  876  	\n  877  	//First draw all images in the menu\n  878: 	//printf(\"Menu has %d images.\\n\",currentMenu->numImages);\n  879  	for (i=0; i < currentMenu->numImages; i++) \n  880  	{\n  ...\n  898  	\n  899  	//Then draw all buttons images in the menu\n  900: 	//printf(\"Menu has %d buttons.\\n\",currentMenu->numButtons);\n  901  	for (i=0; i < currentMenu->numButtons; i++) \n  902  	{\n  ...\n  904  		if (button->touch->down)\n  905  		{\n  906: 			//printf(\"Down.\\n\");\n  907  			memcpy(vertice,button->downVertices,4 * sizeof(xf_colorless_sprite_t));\n  908  		}\n  909  		else\n  910  		{\n  911: 			//printf(\"Down.\\n\");\n  912  			memcpy(vertice,button->upVertices,4 * sizeof(xf_colorless_sprite_t));\n  913  		}\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/netchannel.c:\n   27  \n   28  \n   29: #define DNSServiceRefDeallocate(x) printf(\"DNSServiceRefDeallocate(\" #x \")\\n\"); DNSServiceRefDeallocate(x) \n   30  \n   31  \n   ..\n  122  void NET_Free(void)\n  123  {\n  124: 	printf(\"NET_FREE\\n\");\n  125  	\n  126  	// unregister\n  ...\n  160  	}\n  161  	\n  162: 	printf(\"NET_IsNetworkAvailable\\n\");\n  163  	\n  164: 	//printf(\"NET_IsNetworkAvailable() searching for interface %s with type %d\\n\",INTERFACE_NAME,AF_INET);\n  165  	\n  166  	// We can't tell if bluetooth is available from here, because\n  ...\n  171  	for ( struct ifaddrs *ifa = ifap ; ifa ; ifa = ifa->ifa_next ) {\n  172  		struct sockaddr_in *ina = (struct sockaddr_in *)ifa->ifa_addr;\n  173: 	//	printf(\"[NET_IsNetworkAvailable] Searching interface: %s, family=%d.\\n\",ifa->ifa_name,ina->sin_family);\n  174: 	//	printf(\"current if: %s, family=%d @=%s IFF_UP=%d IFF_RUNNING=%d .\\n\",ifa->ifa_name,ina->sin_family,inet_ntoa(ina->sin_addr),ifa->ifa_flags & IFF_UP != 0, ifa->ifa_flags & IFF_RUNNING != 0);\n  175  		if ( ina->sin_family == AF_INET ) {\n  176  			if ( !strcmp( ifa->ifa_name, INTERFACE_NAME ) ) {\n  177: 		//		printf(\"[NET_IsNetworkAvailable] Found interface: %s, family=%d.\\n\",ifa->ifa_name,ina->sin_family);\n  178  				goodInterface = 1;\n  179  				break;\n  ...\n  192  	\n  193  	\n  194: 	printf(\"NET_GetAddressForInterfaceName\\n\");\n  195  	\n  196  	memset( &s, 0, sizeof( s ) );\n  ...\n  207  		if ( ina->sin_family == AF_INET && !strcmp( ifa->ifa_name, ifname ) ) {\n  208  			uchar *ip = (uchar *)&ina->sin_addr;\n  209: 			printf(\"if: %s, family=%d @=%s IFF_UP=%d IFF_RUNNING=%d .\\n\",ifa->ifa_name,ina->sin_family,inet_ntoa(ina->sin_addr),ifa->ifa_flags & IFF_UP != 0, ifa->ifa_flags & IFF_RUNNING != 0);\n  210: //			printf( \"AddressForInterfaceName( %s ) = ifa_name: %s ifa_flags: %i sa_family: %i=AF_INET ip: %i.%i.%i.%i\\n\", ifname, ifa->ifa_name, ifa->ifa_flags,ina->sin_family, ip[0], ip[1], ip[2], ip[3]  );\n  211: 			sprintf(MENU_GetMultiplayerTextLine(1),\"My IP: %i.%i.%i.%i\",ip[0], ip[1], ip[2], ip[3]);\n  212  			freeifaddrs( ifap );\n  213  			return *ina;\n  ...\n  215  	}\n  216  	freeifaddrs( ifap );\n  217: 	printf( \"AddressForInterfaceName( %s ): Couldn't find IP address\\n\", ifname );\n  218  	return s;\n  219  }\n  ...\n  232  		}\n  233  	}	\n  234: 	printf( \"InterfaceIndexForName( %s ): Couldn't find interface\\n\", ifname );\n  235  	if_freenameindex( ifnames );\n  236  	return 0;\n  ...\n  247  									  void *context ) {\n  248  	\n  249: 	printf(\"DNSServiceRegisterReplyCallback\\n\");\n  250  	\n  251  	if ( errorCode == kDNSServiceErr_NoError ) \n  ...\n  253  		net.type = NET_SERVER;\n  254  		net.state = NET_STARTED;\n  255: 		printf(\"Able to register: I am the one and only SERVER.\\n\");\n  256  	} \n  257  	else \n  ...\n  259  		net.type = NET_CLIENT;\n  260  		net.state = NET_STARTED;\n  261: 		printf(\"Registering error: I have to be a client.\\n\");\n  262  	}\n  263  }\n  ...\n  269  	net.type = NET_UNKNOWN;\n  270  	\n  271: 	printf(\"NET_CheckServerAvailability\\n\");\n  272: 	printf(\"DNSServiceRegister\\n\");\n  273  	DNSServiceErrorType	err = DNSServiceRegister( \n  274  												 &registerRef, \n  ...\n  290  	if ( err != kDNSServiceErr_NoError ) \n  291  	{\n  292: 		printf( \"DNSServiceRegister error\\n\" );\n  293  		net.type = NET_UNKNOWN;\n  294  		return 0;\n  ...\n  315  	\n  316  	if ( select( socket+1, &set, NULL, NULL, &tv ) > 0 ) {\n  317: 		printf(\"Received response from dnsDeamon\\n\");\n  318  		DNSServiceProcessResult( registerRef );\n  319  	}	\n  320  	else {\n  321: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETPEERPIP), \"DNSServiceRegister timeout (%ld sec)\",tv.tv_sec);	\n  322  	}\n  323  	/*\n  324  	// block until we get a response, process it, and run the callback\n  325  	// Do this instead of using a select \n  326: 	printf(\"DNSServiceProcessResult\\n\");\n  327  	err = DNSServiceProcessResult( registerRef );\n  328  	if ( err != kDNSServiceErr_NoError ) \n  329  	{\n  330: 		printf( \"DNSServiceProcessResult error\\n\" );\n  331  		net.type = UNKNOWN;\n  332  		return 0;\n  ...\n  339  	if(net.type == NET_SERVER)\n  340  	{\n  341: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETYPE), \"Waiting for client to connect...\");\n  342: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETYPE+1), \"\");\n  343: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETYPE+2), \"You are Player ONE.\");\n  344  	}\n  345  	\n  346  	if (net.type == NET_CLIENT)\n  347: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETYPE), \"Contacting server...\");\n  348  	\n  349  	\n  ...\n  366  	\n  367  	char	interfaceName[IF_NAMESIZE];\n  368: 	printf(\"DNSServiceQueryRecordReplyCallback\\n\");\n  369  	\n  370  	if_indextoname( interfaceIndex, interfaceName );\n  371  	\n  372: 	//printf( \"DNSServiceQueryRecordReplyCallback: Found service %s on interface %s.\\n\",fullname,interfaceName);\n  373: 	//printf( \"DNSServiceQueryRecordReplyCallback: %s, interface[%i] = %s, [%i] = %i.%i.%i.%i\\n\", fullname, interfaceIndex, interfaceName, rdlen, ip[0], ip[1], ip[2], ip[3] );\n  374  	\n  375  	\n  ...\n  385  	net.serverAddResolved = 1;\n  386  	\n  387: 	sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETPEERPIP),\"PEER IP %s\",inet_ntoa(net.peerAddr.sin_addr));\n  388  }\n  389  \n  ...\n  403  	char	interfaceName[IF_NAMESIZE];\n  404  	\n  405: 	printf(\"DNSServiceResolveReplyCallback\\n\");\n  406  	\n  407  	if_indextoname( interfaceIndex, interfaceName );\n  408: 	//printf( \"Resolve: interfaceIndex [%i]=%s : %s @ %s\\n\", interfaceIndex, interfaceName, fullname, hosttarget );\n  409  	\n  410  \n  ...\n  423  	if ( err != kDNSServiceErr_NoError ) \n  424  	{\n  425: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETPEERPIP), \"DNSServiceQueryRecord error\");\n  426  	} \n  427  	else \n  ...\n  431  		\n  432  		if ( err != kDNSServiceErr_NoError ) \n  433: 			sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETPEERPIP), \"DNSServiceProcessResult error\");\n  434  		\n  435  		DNSServiceRefDeallocate( queryRef );\n  ...\n  448  								   void *context ) {\n  449  	\n  450: 	printf(\"DNSServiceBrowseReplyCallback\\n\");\n  451  	\n  452: 	//printf( \"DNSServiceBrowseReplyCallback %s: interface:%i name:%s regtype:%s domain:%s\\n\", (flags & kDNSServiceFlagsAdd) ? \"ADD\" : \"REMOVE\",interfaceIndex, serviceName, regtype, replyDomain );\n  453  	\n  454  	service_t* service ;\n  ...\n  459  		if ( interfaceIndex == 1 ) \n  460  		{\n  461: 			printf( \"Not adding service on loopback interface.\\n\" );\n  462  			return;\n  463  		} \n  464  		\n  465  		service = &serviceInterfaces[interfaceIndex];\n  466: 		//printf(\"DNSServiceBrowseReplyCallback processing service interface= %d.\\n\",service->interfaceIndex);\n  467  			\n  468  		strncpy( service->browseName, serviceName, sizeof( service->browseName ) -1 );\n  ...\n  491  			\n  492  			if ( err != kDNSServiceErr_NoError ) {\n  493: 				sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETPEERPIP), \"DNSServiceResolve error\");	\n  494  				\n  495  			} else {\n  ...\n  499  					err = DNSServiceProcessResult( resolveRef );\n  500  					if ( err != kDNSServiceErr_NoError ) {\n  501: 						sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETPEERPIP), \"DNSServiceProcessResult error\");	\n  502  					}\n  503  				//} while ( callbackFlags & kDNSServiceFlagsMoreComing );\n  ...\n  531  	int	socket;\n  532  	\n  533: 	printf(\"NET_ResolveNetworkServer\\n\");\n  534  	\n  535: 	printf(\"DNSServiceBrowse\\n\");\n  536  	//Browse and then Resolve\n  537  	DNSServiceErrorType err = DNSServiceBrowse ( \n  ...\n  545  												);  \n  546  	if ( err != kDNSServiceErr_NoError ) {\n  547: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETPEERPIP), \"DNSServiceBrowse error\");\n  548  		return 0;\n  549  	}		\n  ...\n  567  	\n  568  	if ( select( socket+1, &set, NULL, NULL, &tv ) > 0 ) {\n  569: 		printf(\"Received response from dnsDeamon\\n\");\n  570  		DNSServiceProcessResult( browseRef );\n  571  	}	\n  572  	else {\n  573: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETPEERPIP), \"DNSServiceBrowse timeout (%ld sec)\",tv.tv_sec);	\n  574  	}\n  575  	\n  ...\n  589  	struct sockaddr_in bindingIp_address;\n  590  	\n  591: 	printf(\"NET_CreateSocket\\n\");\n  592  	\n  593  	bzero(&bindingIp_address, sizeof(bindingIp_address));\n  ...\n  603  	if ( net.udpSocket == -1 ) \n  604  	{\n  605: 		printf( \"UDP socket failed: %s\\n\", strerror( errno ) );\n  606  		return ;\n  607  	}\n  ...\n  613  	//x = fcntl(udpSocket,F_GETFL,0);\n  614  	if (fcntl(net.udpSocket,F_SETFL, O_NONBLOCK)== -1 ) {\n  615: 		printf( \"UDP fcntl failed: %s\\n\", strerror( errno ) );\n  616  		close( net.udpSocket );\n  617  		\n  ...\n  625  	if (errorCheck == -1)\n  626  	{\n  627: 		printf(\"UDP bind failed: %s\\n\", strerror( errno ) );\n  628  		return ;\n  629  	}\n  630  	\n  631: 	printf(\"[NETCHANNEL ] Bind on %s:%hud\\n\",inet_ntoa(bindingIp_address.sin_addr),bindingIp_address.sin_port);\n  632  	\n  633  	\n  ...\n  647  	net_packet_t outPacket;\n  648  	\n  649: //	printf(\"Net_ProcessSetupPacket\\n\");\n  650  	\n  651  	bzero(&incomingAdd, sizeof(incomingAdd));\n  652  	len = sizeof(incomingAdd);\n  653: 	//printf(\"Net_ProcessSetupPacket()\\n\");\n  654  	\n  655  	byteReceived = recvfrom(net.udpSocket,net.buffer,sizeof(net.buffer),0, (struct sockaddr*)&incomingAdd, &len );\n  ...\n  657  	{\n  658  		if (errno != EAGAIN )\n  659: 			sprintf(MENU_GetMultiplayerTextLine(4),\"Error recvfrom:%d %s.\\n\",errno,strerror( errno ));\n  660  	\n  661: 		//printf(\"No packets.\\n\");\n  662  		return;\n  663  	}\n  664  \n  665: 	printf(\"Net_ProcessSetupPacket() read %d bytes\\n\",byteReceived);\n  666  \n  667  	packet = (net_packet_t*)net.buffer;\n  668  		\n  669: 	printf(\"packet->type=%d\\n\",packet->type);\n  670  	\n  671  	if (packet->type != SETUP_PACKET)\n  672  	{\n  673: 		printf(\"Not a setup packet.\\n\");\n  674  		return;\n  675  	}\n  ...\n  677  	if (packet->sequenceNumber <= net.lastReceivedSequenceNumber)\n  678  	{\n  679: 		printf(\"Old packet.\\n\");\n  680  		return;\n  681  	}\n  ...\n  687  	net.lastReceivedSequenceNumber = packet->sequenceNumber;\n  688  		\n  689: 	sprintf(MENU_GetMultiplayerTextLine(4),\"Received setup packet %i.\\n\",packet->type);\n  690  		\n  691  	//outPacket.cmd = NET_CMD_NOOP;\n  ...\n  694  	{\n  695  		packetConsumed=1;\n  696: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETLASTRECEIVED), \"LAST RECV=NET_CMD_LOAD_NEXT_LEVEL\");\n  697  		\n  698  		//Save peer informations to send replies as this is the first time the server will hear of the client\n  699  		memcpy(&net.peerAddr,&incomingAdd,sizeof(incomingAdd));\n  700: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETPEERPIP),\"PEER IP %s\",inet_ntoa(net.peerAddr.sin_addr));\n  701  		\n  702  		//Perform preload, pause music, pause timer\n  ...\n  706  		controlledPlayer=0;\n  707  		\n  708: //		printf(\"PPRE Player1=%p\\n\",players[0].entity.material);\n  709: //		printf(\"PPRE Player2=%p\\n\",players[1].entity.material);\n  710  		\n  711  		dEngine_CheckState();\n  712  		\n  713: //		printf(\"POST Player1=%p\\n\",players[0].entity.material);\n  714: //		printf(\"POST Player2=%p\\n\",players[1].entity.material);		\n  715  		\n  716  		SND_PauseSoundTrack();\n  717  		Timer_Pause();\n  718  		net.state = NET_PRELOADED;\n  719: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETSTATE), \"state=NET_PRELOADED.\\n\");\n  720  		\n  721: 		printf(\"Client loaded level, but Timer still paused sending NET_CMD_LOAD_NEXT_LEVEL.\\n\");\n  722  		\n  723  		// Trigger preload on the other end as well by sending a NET_CMD_LOAD_NEXT_LEVEL to peer\n  ...\n  728  		sendto(net.udpSocket, &outPacket, sizeof(outPacket), 0, (struct sockaddr*)&net.peerAddr, sizeof(net.peerAddr));\n  729  		\n  730: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETLASTSENT), \"LAST SENT=NET_CMD_LOAD_NEXT_LEVEL\");\n  731  	}\n  732  	\n  733  	if (net.type == NET_CLIENT && net.state == NET_STARTED &&  packet->command.type == NET_CMD_LOAD_NEXT_LEVEL)\n  734  	{\n  735: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETLASTRECEIVED), \"LAST RECV=NET_CMD_LOAD_NEXT_LEVEL\");\n  736  		packetConsumed=1;\n  737  		\n  ...\n  747  		Timer_Pause();\n  748  		net.state = NET_PRELOADED;\n  749: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETSTATE), \"state=NET_PRELOADED.\\n\");\n  750  \n  751: 		printf(\"Client loaded level, but Timer still paused sending NET_CMD_NOTIFY_LOADED.\\n\");\n  752  		\n  753  		// Tell server we are ready to start by sending NET_CMD_NOTIFY_LOADED\n  ...\n  758  		sendto(net.udpSocket, &outPacket, sizeof(outPacket), 0, (struct sockaddr*)&net.peerAddr, sizeof(net.peerAddr));\n  759  		\n  760: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETLASTSENT), \"LAST SENT=NET_CMD_NOTIFY_LOADED\");\n  761  		\n  762  	}\n  ...\n  765  	{\n  766  		packetConsumed=1;\n  767: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETLASTRECEIVED), \"LAST RECV=NET_CMD_NOTIFY_LOADED\");\n  768  		\n  769  		net.state = NET_RUNNING;\n  770: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETSTATE), \"state=NET_RUNNING.\\n\");\n  771: 		//printf(MENU_GetMultiplayerTextLine(MESSAGE_NETSTATE), \"state=NET_RUNNING.\\n\");\n  772  		//Send NET_CMD_START_LEVEL\n  773  		\n  ...\n  777  		Timer_Resume();\n  778  		\n  779: 		printf(\"Server Received NET_CMD_NOTIFY_LOADED, starting and asking client to start as well: NET_CMD_START_LEVEL.\\n\");\n  780  		\n  781  		MENU_Set(MENU_NONE);\n  ...\n  788  		sendto(net.udpSocket, &outPacket, sizeof(outPacket), 0, (struct sockaddr*)&net.peerAddr, sizeof(net.peerAddr));\n  789  		usleep(16*1000);\n  790: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETLASTSENT), \"LAST SENT=NET_CMD_START_LEVEL\");\n  791  	}\n  792  	\n  ...\n  794  	{\n  795  		packetConsumed=1;\n  796: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETLASTRECEIVED), \"LAST RECV=NET_CMD_START_LEVEL\");\n  797  		\n  798  		net.state = NET_RUNNING;\n  ...\n  802  		Timer_Resume();\n  803  		\n  804: 		printf(\"Client Received NET_CMD_START_LEVEL, starting.\\n\");\n  805  		\n  806  		MENU_Set(MENU_NONE);\n  807  		\n  808  		\n  809: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETSTATE), \"state=NET_RUNNING.\\n\");\n  810: 		//printf(MENU_GetMultiplayerTextLine(MESSAGE_NETSTATE), \"state=NET_RUNNING.\\n\");\n  811  		\n  812: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETLASTSENT), \"LAST SENT=NET_CMD_LOAD_NEXT_LEVEL\");\n  813  	}\n  814  	\n  ...\n  819  	\n  820  	if (!packetConsumed)\n  821: 		printf(\"Packet type=%d was not consumed.\",packet->command.type );\n  822  }\n  823  \n  ...\n  828  	struct sockaddr_in localAddress;\n  829  	\n  830: 	//printf(\"NET_Setup\\n\");\n  831  	\n  832  	if (!net.setupRequested)\n  833  	{\n  834: 	//	printf(\"!setupRequested\\n\");\n  835  		return ;\n  836  	\n  ...\n  838  	if (isInitialized)\n  839  	{\n  840: 	//	printf(\"isInitialized\\n\");\n  841  		return ;\n  842  	}\n  843  	\n  844: 	//printf(\"NET_Setup\\n\");\n  845  	\n  846  	//NET_Free();\n  ...\n  850  	if (net.type == NET_UNKNOWN && !NET_IsNetworkAvailable())\n  851  	{\n  852: 		sprintf(MENU_GetMultiplayerTextLine(0), \"No WIFI network available !\");\n  853: 		sprintf(MENU_GetMultiplayerTextLine(1), \"\");\n  854: 		sprintf(MENU_GetMultiplayerTextLine(2), \"Make sure WIFI is enabled\" );\n  855: 		sprintf(MENU_GetMultiplayerTextLine(3), \"and the device is connected.\" );\n  856  	\n  857  		return;	\n  ...\n  861  	if (net.type == NET_UNKNOWN && !NET_CheckServerAvailability())\n  862  	{\n  863: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETMYIP), \"Error while NET_CheckServerAvailability.\\n\");\n  864  		return ;\n  865  	}\n  ...\n  870  		if (!NET_ResolveNetworkServer())\n  871  		{\n  872: 			sprintf(MENU_GetMultiplayerTextLine(0),   \"Unable to find the server !\");\n  873: 			sprintf(MENU_GetMultiplayerTextLine(1),   \"\");\n  874: 			sprintf(MENU_GetMultiplayerTextLine(2), \"Restart the server then try\");\n  875: 			sprintf(MENU_GetMultiplayerTextLine(3), \"connecting again.\");\n  876  			return ;\n  877  		}\n  878: 		//sprintf(MENU_GetMultiplayerTextLine(0), \"Resolved server :) !\\n\");\n  879: 		//sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETPEERPIP), \"Server IP: %s !\",inet_ntoa(net.peerAddr.sin_addr));\n  880  	}\n  881  	\n  ...\n  884  	{\n  885  		localAddress =  NET_GetAddressForInterfaceName(INTERFACE_NAME);	\n  886: 		sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETMYIP),\"Local IP @:'%s'\",inet_ntoa(localAddress.sin_addr));\n  887  	}\n  888  	\n  ...\n  891  	{\n  892  		NET_CreateSocket();\n  893: 		printf(\"File descriptor UDP socket = %d.\\n\",net.udpSocket);\n  894  	}\n  895  	\n  896  	//Process to setup\n  897: 	//printf(\"net.state =%d\\n\",net.state );\n  898  	\n  899  	if (net.state == NET_STARTED)\n  ...\n  907  			registerPacket.command.type = NET_CMD_LOAD_NEXT_LEVEL;\n  908  			sendto(net.udpSocket, &registerPacket, sizeof(registerPacket), 0, (struct sockaddr*)&net.peerAddr, sizeof(net.peerAddr));\n  909: 			//sprintf(MENU_GetMultiplayerTextLine(MESSAGE_NETLASTSENT), \"LAST SENT=NET_CMD_LOAD_NEXT_LEVEL\");\n  910  			\n  911  		}\n  ...\n  919  	else\n  920  	{\n  921: 		printf(\"Stoping setup, as we reached NET_RUNNING\\n\");\n  922  		net.setupRequested = 0;\n  923  		\n  ...\n 1028  	command_t* cmd;\n 1029  	\n 1030: 	//printf(\"NET_Receive\\n\");\n 1031  	\n 1032  	if (!isInitialized)\n ....\n 1044  		{\n 1045  			if (errno != EAGAIN )\n 1046: 				sprintf(MENU_GetMultiplayerTextLine(4),\"Error recvfrom:%d %s.\\n\",errno,strerror( errno ));\n 1047  			break;\n 1048  		}	\n 1049  		if (rcv_packet.sequenceNumber <= net.lastReceivedSequenceNumber)\n 1050  		{\n 1051: 			printf(\"Old packet.\\n\");\n 1052  			continue;\n 1053  		}\n ....\n 1061  		rcv_packet.command.time = simulationTime;\n 1062  		\n 1063: 		//printf(\"Receiving packet for player id= %d\\n\",rcv_packet.command.playerId);\n 1064  		\n 1065  		\n ....\n 1071  			\n 1072  			/*\n 1073: 			printf(\"t=%d rcv: t=%d d=[%.2f %.2f] %d%d%d\\n\",\n 1074  				   simulationTime,\n 1075  				   rcv_packet.type,rcv_packet.command.delta[X],\n ....\n 1094  	\n 1095  	\n 1096: 	printf(\"t=%d,numDeltaUpdateRecv=%d\\n\",simulationTime,numDeltaUpdateRecv);\n 1097  	\n 1098  	return;\n ....\n 1108  		NET_AddFakeToHistory(cmd);\n 1109  		\n 1110: 		//printf(\"t=%d, missing deltaCmd: fake=%.4f,%.4f\\n\",simulationTime,cmd->delta[X],cmd->delta[Y]);\n 1111  		if (commandsBuffers[!controlledPlayer].numCommands < COMMAND_BUFFER_SIZE-1)\n 1112  		{\n ....\n 1119  	else \n 1120  	{\n 1121: 		//printf(\"t=%d: %d deltaCmd(s).\\n\",simulationTime,numDeltaUpdateRecv);\n 1122  		// If we have received more than 1 update, we can undo that many fake commands previously generated\n 1123  		for (i=1; i < numDeltaUpdateRecv && fakeCmdHistory.num >0 && commandsBuffers[!controlledPlayer].numCommands < COMMAND_BUFFER_SIZE-1; i++) \n 1124  		{\n 1125: 			//printf(\"t=%d: Undoing 1 fake deltaCmd.\\n\",simulationTime);\n 1126  			cmd = &cmdBuffer->cmds[commandsBuffers[!controlledPlayer].numCommands];\n 1127  			cmd->time = simulationTime;\n ....\n 1149  	net_packet_t send_packet;\n 1150  	\n 1151: 	//printf(\"NET_Send\\n\");\n 1152  	\n 1153  	if (!isInitialized)\n 1154  		return;\n 1155  	\n 1156: 	//printf(\"To send contains playerId= %X\\n\",toSend.playerId);\n 1157  	\n 1158  	\n ....\n 1161  	send_packet.command.type = NET_RTM_COMMAND;\n 1162  	send_packet.sequenceNumber = net.lastSentSequenceNumber++;\n 1163: 	//printf(\"net.lastSentSequenceNumber=%d\\n\",net.lastSentSequenceNumber);\n 1164  	send_packet.ackSequenceNumber = net.lastReceivedSequenceNumber;\n 1165  	memcpy(&send_packet.command,&toSend,sizeof(command_t));\n ....\n 1167  	//send_packet.command.playerId = controlledPlayer;\n 1168  	\n 1169: 	//printf(\"Sending packet for player id= %X\\n\",send_packet.command.playerId);\n 1170: 	//printf(\"Controlled player = %X\\n\",controlledPlayer);\n 1171  	\n 1172  	sendto(net.udpSocket, &send_packet, sizeof(net_packet_t), 0, (struct sockaddr*)&net.peerAddr, sizeof(net.peerAddr));	\n ....\n 1191  	net_packet_t send_packet;\n 1192  \n 1193: 	printf(\"Net_SendDie\\n\");\n 1194  	\n 1195  	send_packet.type = NET_RUNNING;\n ....\n 1204  int NET_Init(void)\n 1205  {\n 1206: 	printf(\"NET_Init\\n\");\n 1207  	NET_Free();\n 1208  	net.setupRequested = 1;\n ....\n 1212  void NET_OnNextLevelLoad(void)\n 1213  {\n 1214: 	printf(\"NET_OnNextLevelLoad\\n\");\n 1215  	net.setupRequested = 1;\n 1216  	net.state = NET_STARTED;	\n ....\n 1219  char NET_IsRunning(void)\n 1220  {\n 1221: 	printf(\"NET_IsRunning\\n\");\n 1222  	return (net.state == NET_RUNNING);\n 1223  }\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/player.c:\n  105  		//player->ss_position[Y] *= renderHeight;\n  106  		\n  107: 		//printf(\"[P_AttachToCamera] player[%d] ssPos[X]=%.2f, ssPos[Y]=%.2f\\n\",i,player->ss_position[X],player->ss_position[Y]);\n  108  		\n  109  		players[i].showPointer = SHOW_POINTER_DURATION ;\n  ...\n  132  	widthAtDistance = heightAtDistance * camera.aspect;\n  133  	\n  134: 	//printf(\"distanceZFromCamera=%.2f.\\n\",distanceZFromCamera);\n  135: 	//printf(\"pixelHeightAtDistance=%.2f.\\n\",heightAtDistance);\n  136: 	//printf(\"pixelWidthAtDistance=%.2f.\\n\",widthAtDistance);\n  137  \n  138  	entitiesAttachedToCamera= 1;\n  ...\n  471  				t = player->autopilot.timeCounter/player->autopilot.originalTime;\n  472  				\n  473: 				//printf(\"t=%.2f\\n\",t);\n  474: 				//printf(\"player->autopilot.timeCounter=%d\\n\",player->autopilot.timeCounter);\n  475: 				//printf(\"player->autopilot.enabled =%d\\n\",(player->autopilot.timeCounter >0));\n  476  				t *= t;   \n  477  				player->ss_position[X] = player->autopilot.end_ss_position[X] + t * player->autopilot.diff_ss_position[X];\n  ...\n  480  				\n  481  				player->autopilot.timeCounter -= timediff;\n  482: 				//printf(\"player->autopilot.timeCounter=%d.\\n\",player->autopilot.timeCounter);\n  483  				player->autopilot.enabled = (player->autopilot.timeCounter > 0) ;\n  484  				\n  ...\n  560  			//240 units per 1000ms\n  561  			\n  562: 			//printf(\"t= %d: tdiff:%d p pos=%.2f,%.2f,%.2f.\\n\",simulationTime,timediff,playerEntity->matrix[12],playerEntity->matrix[13],playerEntity->matrix[14]);\n  563  			//Update roll if necessary\n  564  			\n  ...\n  808  	\n  809  	//Also render highscore\n  810: 	sprintf(stringScore,SCORE_FORMAT,players[controlledPlayer].score);\n  811  	SCR_StartConvertText();\n  812  	SCR_ConvertTextToVertices(stringScore,SCORE_FONT_SIZE,SCORE_POS_X,SCORE_POS_Y,TEXT_NOT_CENTERED);\n  ...\n 1074  					   \n 1075  					\n 1076: 				//printf(\"ghost target type=%d , ss_pos[%.2f,%.2f].\\n\",ghost->target->type,target->ss_position[X],target->ss_position[Y]);\n 1077  				if (target->next != NULL)\n 1078  					target = target->next;\n ....\n 1100  			if(ghost->target != 0)\n 1101  			{\n 1102: 				printf(\"t= %d ghost pos= [%.2f,%.2f].\\n\",ghost->lastTimeSimulated,ghost->ss_position[X],ghost->ss_position[Y]);\n 1103: 				printf(\"t= %d ghost dire= [%.2f,%.2f].\\n\",ghost->lastTimeSimulated,ghost->ss_direction[X],ghost->ss_direction[Y]);\n 1104: 				printf(\"t= %d target pos= [%.2f,%.2f].\\n\",ghost->lastTimeSimulated,ghost->target->ss_position[X],ghost->target->ss_position[Y]);\n 1105  			}\n 1106  			*/\n ....\n 1147  						}\n 1148  					\n 1149: 						//printf(\"t= %d, gid=%d rotation = %.2f\\n\",ghost->lastTimeSimulated,i,ghostRotation);\n 1150  					\n 1151  					\n ....\n 1163  			}\n 1164  \n 1165: 			//	printf(\"Simulated ghost t=%d x=%.2f y=%.2f.\\n\",ghost->lastTimeSimulated,ghost->ss_position[X],ghost->ss_position[Y]);\n 1166  			ghost->lastTimeSimulated += GHOST_DELTA_T_MS;\n 1167  		\n ....\n 1215  			\n 1216  		\n 1217: 			//printf(\"Ghost has %d vertices stepUShort=%d , stepUByte=%d.\\n\",ghost->lengthVertexArray,stepUShort,stepUByte);\n 1218  		\n 1219  			textureY = SHRT_MAX;\n ....\n 1279  	if (players[playerId].respawnCounter >= 0)\n 1280  	{\n 1281: 		//printf(\"RESPAWN branch lives=%d\\n\",players[playerId].lives);\n 1282  		players[playerId].invulFlickering = 0;\n 1283  		\n ....\n 1304  	else \n 1305  	{\n 1306: 		//printf(\"RIP branch lives=%d\\n\",players[playerId].lives);\n 1307  		// Set player's position out of screen\n 1308  		players[playerId].ss_position[X] = 0.5f*(playerId-0.5f)*2.f;\n ....\n 1349  			\n 1350  		}\n 1351: 		//printf(\"players[playerId].autopilot.timeCounter=%d\\n\",players[playerId].autopilot.timeCounter);\n 1352  	}\n 1353  	\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/preproc.c:\n  138  	if (face->hs_numVertices < 3)\n  139  	{\n  140: 		//printf(\"W clipping discared entire face.\\n\");\n  141  		return;\n  142  	}\n  ...\n  194  	if (face->hs_numVertices < 3)\n  195  	{\n  196: 		//printf(\"TOP clipping discared entire face.\\n\");\n  197  		return;\n  198  	}\n  ...\n  251  	if (face->hs_numVertices < 3)\n  252  	{\n  253: 		//printf(\"DOWN clipping discared entire face.\\n\");\n  254  		return;\n  255  	}\n  ...\n  308  	if (face->hs_numVertices < 3)\n  309  	{\n  310: 		//printf(\"LEFT clipping discared entire face.\\n\");\n  311  		return;\n  312  	}\n  ...\n  365  	if (face->hs_numVertices < 3)\n  366  	{\n  367: 		//printf(\"RIGHT clipping discared entire face.\\n\");\n  368  		return;\n  369  	}\n  ...\n  421  	if (face->hs_numVertices < 3)\n  422  	{\n  423: 		//printf(\"NEAR clipping discared entire face.\\n\");\n  424  		return;\n  425  	}\n  ...\n  477  	if (face->hs_numVertices < 3)\n  478  	{\n  479: 		//printf(\"FAR clipping discared entire face.\\n\");\n  480  		return;\n  481  	}\n  ...\n  498  	\n  499  	\n  500: 	//printf(\"PREPROC_ReadFrameFromFile\");\n  501  	\n  502  	LE_readToken(); //time\n  ...\n  591  		PREPROC_InterpolateFrames(startFrame,endFrame,interpolationFactor,newFrame->position,newFrame->orientation);\n  592  		\n  593: 		printf(\"Expanded frame t=%d\\n\",newFrame->time);\n  594  		\n  595  		currentFrame = newFrame;\n  ...\n  646  	if (face->ss_numVertices >= PREC_FACE_MAX_VERTICES)\n  647  	{\n  648: 		printf(\"CAM_ComputeSignedArea too many vertices.\\n\");\n  649  		exit(0);\n  650  	}\n  ...\n  691  	\n  692  	if (logFile)\n  693: 		fprintf(logFile, \"PREPROC_PopulateRawFaceSet: processing frame t=%d.\\n\",frame->time);\n  694  	\n  695: 	printf( \"PREPROC_PopulateRawFaceSet: processing frame t=%d.\\n\",frame->time);\n  696  	\n  697  	up[0] = quatMatrix[3];\n  ...\n  717  	\n  718  	\n  719: 	//printf(\"Frame t=%d:\\n\",frame->time);\n  720  	\n  721: //	printf(\"Matrix orientation:\\n\");\n  722  //	matrix_print3x3(quatMatrix);\n  723  	\n  724: 	//printf(\"Matrix pv.\\n\");	matrix_print(pv);\n  725  	\n  726  	// Sorting entities from near to far to increase early face area rejection rate\n  ...\n  741  	if (logFile)\n  742  	{\n  743: 		fprintf(logFile,\"-----------------\\n\");\n  744  		for( i = 0 ; i < 4 ; i++)		//Column dest\n  745  		{\n  ...\n  747  			{\n  748  				// m1 j row * m2 i column\n  749: 				fprintf(logFile,\" %.4f \", pv[i+j*4]);\n  750  			}\n  751: 			fprintf(logFile,\"\\n\");\n  752  		}\n  753: 		fprintf(logFile,\"-----------------\\n\");\n  754  	}\n  755  	\n  ...\n  760  		mesh = entity->model;\n  761  		\n  762: 		if (logFile)fprintf(logFile, \"	Processing entity : %d.\\n\",i);\n  763  		\n  764  		face.objectId = sortedIndex[i].indexId ;\n  ...\n  771  		if (INT_OUT == COLL_CheckBoxAgainstFrustrum(entity->worldSpacebbox,frustrum) )\n  772  		{\n  773: 			//printf(\"	Entity %hu  is not in the view frustrum : discard.\\n\",i);\n  774  			continue;\n  775  		}\n  ...\n  800  			if (logFile)\n  801  			{\n  802: 				fprintf(logFile, \"	face %hd ms_vertices[0] = %f, %f. %f %f.\\n\",face.faceId,face.ms_vertices[0][X],face.ms_vertices[0][Y],face.ms_vertices[0][Z],face.ms_vertices[0][W]);\n  803: 				fprintf(logFile, \"	face %hd ms_vertices[1] = %f, %f. %f %f.\\n\",face.faceId,face.ms_vertices[1][X],face.ms_vertices[1][Y],face.ms_vertices[1][Z],face.ms_vertices[1][W]);\n  804: 				fprintf(logFile, \"	face %hd ms_vertices[2] = %f, %f. %f %f.\\n\",face.faceId,face.ms_vertices[2][X],face.ms_vertices[2][Y],face.ms_vertices[2][Z],face.ms_vertices[3][W]);	\n  805  			}\n  806  			\n  ...\n  817  			\n  818  			\n  819: 			if (logFile) fprintf(logFile, \"	face %hd after polygon clipping: has %uhd vertices.\\n\",face.faceId, face.hs_numVertices);\n  820  			\n  821  			//Perspective divide\n  ...\n  839  				;\n  840  #else\n  841: 				if (logFile) fprintf(logFile, \"	face %hd is invisible (not facing or out of screen %i) area=%f.\\n\",face.faceId,face.ss_numVertices,face.area);\n  842  				continue;\n  843  #endif\n  ...\n  850  			 if (COLL_CheckAgainstUnitCube(&face) == INT_OUT)\n  851  			 {\n  852: 			 //printf(\"	Entity %d, Face %hu is not in the view frustrum : discard.\\n\",i,face.indexId);\n  853: 			 //printf(\"		Face %hu Size area: %f\\n\",j,face.area);\n  854  			 continue;\n  855  			 }\n  856  			 */\n  857  			\n  858: 			if (logFile) fprintf(logFile, \"	face %hd is visible.\\n\",face.faceId);\n  859  			\n  860  			PREPROC_InsertFaceIntoVisSet(&face,frame->visSet.visFaces, &frame->visSet.numVisFaces );\n  ...\n  864  	\n  865  	\n  866: 	//printf(\"Frame t=%d has %d faces visibles.\\n\",frame->time,frame->visSet.numVisFaces);\n  867  	\n  868  	free(sortedIndex);\n  ...\n  897  	if (!fileHandle)\n  898  	{\n  899: 		printf(\"[CAM_SaveFramesToCP2Binary] Failed saving binary cp2.\\n\");\n  900  		return;\n  901  	}\n  ...\n  980  	fclose(fileHandle);\n  981  	Timer_resetTime();\n  982: 	printf(\"[PREPROC_SaveFramesToCP2Binary] Wrote %u keyFrames and %u deltaFrames.\\n\",keyFrameCounter,nonKeyFrameCounter);\n  983  }\n  984  \n  ...\n 1004  	for (i=0 ; i <  num_map_entities ; i++) \n 1005  	{\n 1006: 		fprintf(debug,\"indicesPerObjectId[%hu]=%hu.\\n\",i,indicesPerObjectId[i]);\n 1007  	}\n 1008  	\n ....\n 1015  		\n 1016  		for (j=0 ; j < map[i].model->numIndices ; j+=3)\n 1017: 			fprintf(debug,\"entityIndiceToModelIndice[%hu][%hu]=%hu\\n\",i,j,entityIndiceToModelIndice[i][j]);\n 1018  	}\n 1019  \n ....\n 1024  		\n 1025  		for (j=0 ; j < map[i].model->numIndices ; j+=3)\n 1026: 			fprintf(debug,\"modelIndiceToEntityIndice[%hu][%hu]=%hu\\n\",i,j,modelIndiceToEntityIndice[i][j]);\n 1027  	}\n 1028  	\n ....\n 1060  	{\n 1061  		\n 1062: 		sprintf(debugFilename, \"/Users/fabiensanglard/tmp/debug/frame-%6d.txt\",currentFrame->time);\n 1063  		debug = fopen(debugFilename, \"wt\");\n 1064  	}\n 1065  	\n 1066: 	printf(\"Converting frame t=%d to camera_frame_t.\\n\",currentFrame->time);\n 1067  	\n 1068  	runTimeFrame->time = currentFrame->time;\n ....\n 1082  	{\n 1083  		if (TRACE_CONVERT_FRAME)\n 1084: 			fprintf(debug, \"frame %d is key.\\n\",runTimeFrame->time);\n 1085  		\n 1086  		\n ....\n 1130  \n 1131  			if (TRACE_CONVERT_FRAME)\n 1132: 				fprintf(debug,\"	Entity %hu model face %hu is at %hu.\\n\",face->objectId,face->faceId*3,visSet->numIndices);\n 1133  			\n 1134  			visSet->numIndices += 3;		\n ....\n 1158  	{\n 1159  		if (TRACE_CONVERT_FRAME)\n 1160: 			fprintf(debug, \"frame %d is NOT key.\\n\",runTimeFrame->time);\n 1161  		\n 1162  		\n ....\n 1179  				\n 1180  				if (TRACE_CONVERT_FRAME)\n 1181: 					fprintf(debug,\"	[Add   ] Entity %hu, ModelFace %hu.\\n\",toBeAdded[numToBeAdded].objectId,toBeAdded[numToBeAdded].faceId*3);\n 1182  				\n 1183  				numToBeAdded++;\n ....\n 1206  				\n 1207  				if (TRACE_CONVERT_FRAME)\n 1208: 				fprintf(debug,\"	[Remove ] Entity %hu, ModelFace %hu.\\n\",toBeRemoved[numToBeRemoved].objectId,toBeRemoved[numToBeRemoved].faceId*3);\n 1209  				\n 1210  				numToBeRemoved++;\n ....\n 1218  		if (TRACE_CONVERT_FRAME)\n 1219  		{\n 1220: 			fprintf(debug,\"numToBeAdded=%hu.\\n\",numToBeAdded);\n 1221  			\n 1222: 			fprintf(debug,\"numToBeRemoved=%hu.\\n\",numToBeRemoved);\n 1223  		}\n 1224  		\n 1225  		for (i=0; i < numToBeRemoved ; i++) \n 1226  		{\n 1227: 			//printf(\"ToBeRemoved: @%hu @%hu @%hu.\\n\",toBeRemoved[i].objectId,toBeRemoved[i].faceId,modelIndiceToEntityIndice[ toBeRemoved[i].objectId   ][ toBeRemoved[i].faceId*3]);\n 1228  		}\n 1229  		\n ....\n 1252  		\n 1253  		if (TRACE_CONVERT_FRAME)\n 1254: 			fprintf(debug,\"num entities to update=%hu.\\n\",worldVisSet->numVisSets);\n 1255  		\n 1256  		worldVisSet->visSets = calloc(worldVisSet->numVisSets, sizeof(entity_visset_t));\n ....\n 1288  			\n 1289  			if (TRACE_CONVERT_FRAME)\n 1290: 				fprintf(debug,\"	[toBeRemoved] Entity %hu modelId %hu = entity %hu.\\n\",toBeRemoved[i].objectId ,toBeRemoved[i].faceId*3,modelIndiceToEntityIndice[ toBeRemoved[i].objectId   ][ toBeRemoved[i].faceId*3]);\n 1291  			\n 1292  			visSet->facesToRemove[ visSet->numFacesToRemove++ ] = modelIndiceToEntityIndice[ toBeRemoved[i].objectId   ][ toBeRemoved[i].faceId*3];\n ....\n 1299  			\n 1300  			if (TRACE_CONVERT_FRAME)\n 1301: 				fprintf(debug,\"	[toBeAdded  ] Entity %hu modelId %hu.\\n\",toBeAdded[i].objectId ,toBeAdded[i].faceId*3);\n 1302  			\n 1303  			visSet->facesToAdd[ visSet->numFacesToAdd++ ] = toBeAdded[i].faceId*3;\n ....\n 1402  	entity_t*				entity;\n 1403  	\n 1404: 	printf(\"[PREPROC_ConvertCp1Tocp2b]\");\n 1405  	\n 1406  	file = FS_OpenFile(camera.pathFilename, \"rt\");\n ....\n 1411  	if (!file)\n 1412  	{\n 1413: 		printf(\"CP file cannot be opened. Aborting.\\n\");\n 1414  		return;\n 1415  	}\n ....\n 1422  	if (strcmp(\"cp1\", LE_getCurrentToken()))\n 1423  	{\n 1424: 		printf(\"CP file found but magic number check failed. Aborting.\\n\");\n 1425  		return;\n 1426  	}\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/quaternion.c:\n  117  	inv[3] =  quat[3];\n  118  	\n  119: 	//printf(\"joint inverse : x=%.3f,y=%.3f,z=%.3f  w=%.3f \\n\",inv[0],inv[1],inv[2],inv[3]);				\n  120  	\n  121  	Quat_rotatePoint (inv,v1,dest);\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/renderer.c:\n  152  	if (rendererType == GL_11_RENDERER)\n  153  	{\n  154: 		printf(\"[Renderer] Running in mode OpenGL ES 1.1\\n\");\n  155  		initFixedRenderer(&renderer);\n  156  	}\n  ...\n  158  	if (rendererType == GL_20_RENDERER)\n  159  	{\n  160: 		printf(\"[Renderer] Running in mode OpenGL ES 2.0\\n\"); \n  161  		initProgrRenderer(&renderer);\n  162  	}\n  ...\n  187  \n  188  //	if (enFxLib.num_indices != 0)\n  189: //		printf(\"fsdf\\n\");\n  190  	// enemy particules + FX + players lives counter\n  191  	\n  ...\n  309  	if ( scr_TextNumVertices + stringLength * 4 > MAX_NUM_TEXT_VERTICES)\n  310  	{\n  311: 		printf(\"[SCR_ConvertTextToVertices] Unable to render string, preventing buffer overflow.\\n\");\n  312  		return;\n  313  	}\n  ...\n  326  	for (i=0; i < stringLength; i++) \n  327  	{\n  328: 		//	printf(\"character %c=%d\\n\",*currentChar,*currentChar);\n  329  		textCoo[X] = *currentChar & 15;\n  330  		textCoo[Y] = *currentChar >> 4;\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/renderer_fixed.c:\n   62  	GLenum err = glGetError();\n   63  	switch (err) {\n   64: 		case GL_INVALID_ENUM:printf(\"Error GL_INVALID_ENUM %s, %s\\n\", step,details); break;\n   65: 		case GL_INVALID_VALUE:printf(\"Error GL_INVALID_VALUE  %s, %s\\n\", step,details); break;\n   66: 		case GL_INVALID_OPERATION:printf(\"Error GL_INVALID_OPERATION  %s, %s\\n\", step,details); break;				\n   67: 		case GL_OUT_OF_MEMORY:printf(\"Error GL_OUT_OF_MEMORY  %s, %s\\n\", step,details); break;			\n   68  		case GL_NO_ERROR: break;\n   69: 		default : printf(\"Error UNKNOWN  %s, %s\\n\", step,details);break;\n   70  	}\n   71  }\n   ..\n   79  	gluLookAt(camera.position, vLookat, camera.up, modelViewMatrix);\n   80  	\n   81: 	//printf(\"t=%d, up=[%.2f,%.2f,%.2f]\\n\",simulationTime,camera.up[X],camera.up[Y],camera.up[Z]);\n   82  	\n   83  	glLoadMatrixf(modelViewMatrix);\n   ..\n   99  void Set2DF(void)\n  100  {\n  101: 	//printf(\"[Set2DF] glClear to be removed.\\n\");\n  102  	//glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n  103  	\n  ...\n  212  		\n  213  		glCompressedTexImage2D(GL_TEXTURE_2D, 0, texture->format, texture->width,texture-> height, 0, texture->dataLength[0], texture->data[0]);\n  214: 		//printf(\"Uploading mipmapp %d w=%d, h=%d, size=%d\\n\",0,texture->width,texture-> height,texture->dataLength[0]);\n  215  		\n  216  		mipMapDiv = 2;\n  ...\n  218  		{\n  219  			glCompressedTexImage2D(GL_TEXTURE_2D, i, texture->format, texture->width/mipMapDiv,texture-> height/mipMapDiv, 0, texture->dataLength[i], texture->data[i]);\n  220: 		//	printf(\"Uploading mipmapp %d w=%d, h=%d, size=%d\\n\",i,texture->width/mipMapDiv,texture-> height/mipMapDiv,texture->dataLength[i]);\n  221  			free(texture->data[i]);\n  222  			texture->data[i] = 0;\n  ...\n  457  {\n  458  \n  459: //	printf(\"RenderEntityF Player1=%p\\n\",players[0].entity.material);\n  460: //	printf(\"RenderEntityF Player2=%p\\n\",players[1].entity.material);		\n  461  	\n  462  	glPushMatrix();\n  ...\n  465  	{\n  466  		//entity->matrix[13] = 110;\n  467: 	//	printf(\"[RenderEntityF] entity id=%d\\n\",entity->uid);\n  468: 	//	printf(\"[RenderEntityF] entity pos=[%.2f,%.2f,%.2f,%.2f]\\n\",entity->matrix[12],entity->matrix[13],entity->matrix[14],entity->matrix[15]);\n  469  		//matrix_print(entity->matrix);\n  470  		\n  ...\n  568  	enemy_t* enemy;\n  569  	\n  570: 	//printf(\"Starting rendering frame, t=%d.\\n\",simulationTime);\n  571  \n  572  \n  ...\n  633  	for (i=0 ; i < numPlayers; i++) \n  634  	{\n  635: 		//printf(\"player[%d].shouldDraw=%d\\n\",i,players[i].shouldDraw);\n  636  		if (players[i].shouldDraw)\n  637  			RenderEntityF(&players[i].entity);\n  ...\n  688  	if (entity == NULL || entity->model == NULL)\n  689  	{\n  690: 		printf(\"Entity was NULL: No vertices to upload.\\n\");\n  691  		return;\n  692  	}\n  ...\n  707  	mesh->vertexArray = 0;\n  708  #else\n  709: 	printf(\"Warning, not freeing mesh after openGL upload.\\n\");\n  710  #endif\n  711  	\n  ...\n  831  		glVertexPointer(  2, GL_SHORT,  sizeof(xf_sprite_t), explosionVertices->pos);\n  832  		glTexCoordPointer(2, GL_SHORT,  sizeof(xf_sprite_t), explosionVertices->text);\n  833: 		//printf(\"REMOVE COLOR INDICES EXPLOSIONS RenderFXSpritesF !!!! \\n\");\n  834  		glColorPointer(4, GL_UNSIGNED_BYTE, sizeof(xf_sprite_t), explosionVertices->color);\n  835  		glDrawElements (GL_TRIANGLES, numExplosionIndices, GL_UNSIGNED_SHORT,explosionIndices);\n  ...\n  845  	glDrawElements (GL_TRIANGLES, enFxLib.num_indices, GL_UNSIGNED_SHORT,enFxLib.indices);\n  846  	STATS_AddTriangles(enFxLib.num_indices/3);\n  847: 	//printf(\"enFxLib.num_indices=%d\\n\",enFxLib.num_indices);\n  848  	\n  849  	\n  ...\n  979  	GLenum err;\n  980  	\n  981: 	//printf(\"[initFixedRenderer] has a nnnasty hack\");\n  982  	\n  983  	renderer->type = GL_11_RENDERER ;\n  ...\n 1044  	err = glGetError();\n 1045  	if (err != GL_NO_ERROR)\n 1046: 		printf(\"Error initing 1.1: glError: 0x%04X\", err);\n 1047  }\n 1048  \n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/renderer_progr.c:\n  148  	{\n  149  		return 0;\n  150: 		printf(\"Shader was null: WTF !\\n\");\n  151  	}\n  152  	\n  ...\n  203  	\n  204  	switch (status) {\n  205: 		case GL_FRAMEBUFFER_COMPLETE:						printf(\"GL_FRAMEBUFFER_COMPLETE\\n\");break;\n  206: 		case 0x8CDB:										printf(\"GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT\\n\");break;\n  207: 		case GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT:			printf(\"GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT\\n\");break;\n  208: 		case GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:	printf(\"GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\\n\");break;\n  209: 		case GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS:			printf(\"GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS\\n\");break;			\n  210: 		case GL_FRAMEBUFFER_UNSUPPORTED:					printf(\"GL_FRAMEBUFFER_UNSUPPORTED\\n\");break;	\n  211: 		default:											printf(\"Unknown issue (%x).\\n\",status);break;	\n  212  	}	\n  213  \n  ...\n  227  	const filehandle_t* shaderFile;\n  228  	\n  229: 	printf(\"Loading %s\\n\",shaderSrcPath);\n  230  	\n  231  	memset(sources, 0, 9 * sizeof(GLchar*));\n  ...\n  238  	if(shader == 0) \n  239  	{\n  240: 		printf(\"Failed to created GL shader for '%s'\\n\",shaderSrcPath);\n  241  		return 0; \n  242  	}\n  ...\n  248  	if (!shaderFile)\n  249  	{\n  250: 		printf(\"Could not load shader: %s\\n\",shaderSrcPath);\n  251  		return 0;\n  252  	}\n  ...\n  270  	\n  271  	//for(i=0;i<8;i++)\n  272: 	//	printf(\"%s\",sources[i]);\n  273  	\n  274  	// Load the shader source \n  ...\n  293  			char* infoLog = malloc(sizeof(char) * infoLen); \n  294  			glGetShaderInfoLog(shader, infoLen, NULL, infoLog); \n  295: 			printf(\"Error processing '%s' compiling shader:\\n%s\\n\",shaderSrcPath, infoLog); \n  296  			free(infoLog); \n  297  		} \n  ...\n  320  	if(shaderProg->prog == 0) \n  321  	{\n  322: 		printf(\"Could not create GL program.\");\n  323  		return ; \n  324  	}\n  ...\n  342  			char* infoLog = malloc(sizeof(char) * infoLen); \n  343  			glGetProgramInfoLog(shaderProg->prog, infoLen, NULL, infoLog); \n  344: 			printf(\"Error linking program:\\n%s\\n\", infoLog); \n  345  			\n  346  			free(infoLog); \n  ...\n  356  	GLenum err = glGetError();\n  357  	switch (err) {\n  358: 		case GL_INVALID_ENUM:printf(\"Error GL_INVALID_ENUM %s, %s\\n\", step,details); break;\n  359: 		case GL_INVALID_VALUE:printf(\"Error GL_INVALID_VALUE  %s, %s\\n\", step,details); break;\n  360: 		case GL_INVALID_OPERATION:printf(\"Error GL_INVALID_OPERATION  %s, %s\\n\", step,details); break;				\n  361: 		case GL_OUT_OF_MEMORY:printf(\"Error GL_OUT_OF_MEMORY  %s, %s\\n\", step,details); break;			\n  362  		case GL_NO_ERROR: break;\n  363: 		default : printf(\"Error UNKNOWN  %s, %s \\n\", step,details);break;\n  364  	}\n  365  }\n  ...\n  942  	if (entity == NULL || entity->model == NULL)\n  943  	{\n  944: 		printf(\"Entity was NULL: No vertices to upload.\\n\");\n  945  		return;\n  946  	}\n  ...\n  965  void RenderFXSprites(void)\n  966  {\n  967: 	printf(\"Not implemented (RenderFXSprites).!\\n\");\n  968  }\n  969  \n  970  void DrawControls(void)\n  971  {\n  972: 	printf(\"Not implemented (DrawControls) .!\\n\");\n  973  }\n  974  \n  ...\n 1000  void RenderColorlessSprites(xf_colorless_sprite_t* vertices, ushort numIndices,ushort* indices)\n 1001  {\n 1002: 	printf(\"Not implemented (RenderColorlessSprites) .!\\n\");\n 1003  }\n 1004  \n ....\n 1007  void FadeScreen(float alpha)\n 1008  {\n 1009: 	printf(\"Not implemented (FadeScreen) .!\\n\");\n 1010  }\n 1011  \n 1012  void SetMaterialTextureBlending(char modulate)\n 1013  {\n 1014: 	printf(\"Not implemented (SetMaterialTextureBlending) .!\\n\");\n 1015  	\n 1016  }\n ....\n 1018  void SetTransparency(float alpha)\n 1019  {\n 1020: 	printf(\"Not implemented (SetTransparency) .!\\n\");\n 1021  	\n 1022  }\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/shab.c:\n  120  	//cosAngle = cosf(angle);\n  121  	//sinAngle = sinf(angle);\n  122: 	//printf(\"[emitSHABBullet] angle=%.2f\\n\",angle);\n  123  	\n  124  	bullet->posDiff[X] = cosf(angle)*SHAB_BULLET_DISTANCE_TTL*SS_H;//bullet->posDiff[X] * cosAngle - bullet->posDiff[Y] *  sinAngle; \n  125  	bullet->posDiff[Y] = sinf(angle)*SHAB_BULLET_DISTANCE_TTL*SS_H;//tmp                * sinAngle + bullet->posDiff[Y] *  cosAngle;\n  126  	\n  127: 	//printf(\"[emitSHABBullet] posDiffX=%d posDiffY=%d\\n\",bullet->posDiff[X],bullet->posDiff[Y]);\n  128  }\n  129  \n  ...\n  152  		step = ( a2-a1)/enemy->parameters[PARAMETER_SHAB_FIRING_NUM_THREAD];\n  153  		\n  154: 		//printf(\"a1=%.2f, a2=%.2f step=%.2f.\\n\",a1,a2,step);\n  155  		\n  156  		for(angle = a1,i=0; \n  ...\n  160  			emitSHABBullet(enemy,angle);\n  161  			SND_PlaySound(SND_ENEMY_SHOT);\n  162: 			//printf(\"emitSHABBullet(%.2f).\\n\",angle);\n  163  		}\n  164  		enemy->lastTimeFired = simulationTime;\n  ...\n  222  	//f = (simulationTime -  enemy->lastTimeFired) / (float)SHAB_FIRE_DELAY_MS;\n  223  	\n  224: 	//printf(\"%.2f\\n\",f);\n  225  	\n  226  	//return;\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/sounds.c:\n   48  	\n   49  	if (!LoadWavInfo(filename, &sound->data, &sound->metaData ))\n   50: 			printf(\"[SND_Load] Unable to load sound: '%s'.\\n\",filename);\n   51  	\n   52: 	printf(\"[SND_Load] Loaded sound: %s sample_rate=%ld \",filename,sound->metaData.sample_rate);\n   53  	\n   54  	// Calculate buffer size\n   ..\n   60  		{\n   61  			sound->format = AL_FORMAT_STEREO16;\n   62: 			printf(\"format=AL_FORMAT_STEREO16.\\n\");\n   63  		}\n   64  		else\n   65  		{\n   66  			sound->format = AL_FORMAT_MONO16;\n   67: 			printf(\"format=AL_FORMAT_MONO16.\\n\");			\n   68  		}\n   69  	}\n   ..\n   73  		{\n   74  			sound->format = AL_FORMAT_STEREO8;\n   75: 			printf(\"format=AL_FORMAT_STEREO8.\\n\");			\n   76  		}\n   77  		else\n   78  		{\n   79  			sound->format = AL_FORMAT_MONO8;\n   80: 			printf(\"format=AL_FORMAT_MONO8.\\n\");\n   81  		}\n   82  	}\n   83  	//else\n   84: 	//	printf(\"format=UNKNOWN.\\n\");\n   85  	sound->lastTimePlayed = INT_MIN;\n   86  	\n   ..\n   93  	sound->data=0;\n   94  #else\n   95: 	printf(\"Warning, not freeing WAV after openAL upload.\\n\");\n   96  #endif\n   97  }\n   ..\n  162  {\n  163  	\n  164: 	printf(\"[SND_Init] Initalizing sound system...\\n\");\n  165  	SND_GetDeviceList();\n  166  	\n  ...\n  169  	if( device == NULL )\n  170  	{\n  171: 		printf( \"Failed to Initialize OpenAL\\n\" );\n  172  		alcDestroyContext( context );\n  173  		context = 0;\n  ...\n  179  	if( context == NULL )\n  180  	{\n  181: 		printf( \"Failed to initialize OpenAL\\n\" );\n  182  		alcDestroyContext( context );\n  183  		context = 0;\n  ...\n  192  	if( alcGetError( device ) != ALC_NO_ERROR )\n  193  	{\n  194: 		printf( \"Failed to Make Context Current\\n\" );\n  195  		alcDestroyContext( context );\n  196  		context = 0;\n  ...\n  199  	\n  200  	\n  201: 	printf( \"[OpenAL] Context succesfully initialized.\\n\" );\n  202  		\n  203  \n  ...\n  230  	alSourceStop(source);\n  231  	\n  232: 	//printf(\"Uploading sound %d, sampleRate=%ld\\n\",sndId,sound->metaData.sample_rate);\n  233  	alSourcef( source, AL_GAIN, 0.6f );\n  234  	alSourcei( source, AL_BUFFER, sound->alBuffer );\n  ...\n  237  	alSourcePlay( source );\n  238  	\n  239: 	//printf(\"playing sound %d on source %ud with soundBuffer %ud\\n\",sndId,source,sound->alBuffer);\n  240  	//if( alcGetError( device ) != ALC_NO_ERROR )\n  241  	//{\n  242: 	//	printf(\"alcGetError()=%d\\n\",alcGetError( device ) );\n  243  	//}\n  244  	\n  ...\n  281  	//We need to generate the next frames for the amount timediff milliseconds.\n  282  \n  283: 	//printf(\"%ld.\\n\",sounds[SND_PLASMA].metaData.samples);\n  284  \n  285  	/*\n  286  	if (sounds[SND_PLASMA].lastTimePlayed > 0)\n  287: 	printf(\"(simulationTime - sounds[SND_PLASMA].lastTimePlayed) * (22050.0/1000)=%d\\n\",(simulationTime - sounds[SND_PLASMA].lastTimePlayed) * (22050/1000));\n  288  	*/\n  289  	\n  ...\n  297  			sndValue = sounds[SND_PLASMA].data[((simulationTime - sounds[SND_PLASMA].lastTimePlayed)*22050/1000)+i];\n  298  			numActiveChannel++;\n  299: 			//printf(\"Writing plasma [%i]\\n\",sounds[SND_PLASMA].data[((simulationTime - sounds[SND_PLASMA].lastTimePlayed)*22050/1000)+i);\n  300  		}\n  301  \n  ...\n  304  			sndValue += sounds[SND_EXPLOSION].data[((simulationTime - sounds[SND_EXPLOSION].lastTimePlayed)*22050/1000)+i];\n  305  			numActiveChannel++;\n  306: 			//printf(\"Writing plasma [ %d/%ld]\\n\",((simulationTime - sounds[SND_PLASMA].lastTimePlayed)*22050/1000)+i,sounds[SND_PLASMA].metaData.samples);\n  307  		}\n  308  		\n  ...\n  311  			sndValue += sounds[SND_GHOST_LAUNCH].data[((simulationTime - sounds[SND_GHOST_LAUNCH].lastTimePlayed)*22050/1000)+i];\n  312  			numActiveChannel++;\n  313: 			//printf(\"Writing plasma [ %d/%ld]\\n\",((simulationTime - sounds[SND_PLASMA].lastTimePlayed)*22050/1000)+i,sounds[SND_PLASMA].metaData.samples);\n  314  		}\n  315  		\n  ...\n  318  			sndValue += sounds[SND_ENEMY_SHOT].data[((simulationTime - sounds[SND_ENEMY_SHOT].lastTimePlayed)*22050/1000)+i];\n  319  			numActiveChannel++;\n  320: 			//printf(\"Writing plasma [ %d/%ld]\\n\",((simulationTime - sounds[SND_PLASMA].lastTimePlayed)*22050/1000)+i,sounds[SND_PLASMA].metaData.samples);\n  321  		}\n  322  		\n  ...\n  327  		}\n  328  \n  329: 		//printf(\"Writing %uc\\n\",sndValue);\n  330  		audioTrack[simulationTime * 22050/1000 +i] = sndValue ;\n  331  		\n  ...\n  413  	if (!f)\n  414  	{\n  415: 		printf(\"Error creating file %s .\\n\",SOUND_TRACK_LOCATION);\n  416  	}\n  417  	\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/stats.c:\n   71  	\n   72  	\n   73: 	sprintf( fpsText,\"Fps: %d\" ,fps );\n   74: 	sprintf( teSwText, \"Texture Switches: %d\",textSwitchCount );\n   75: 	sprintf( polCnText, \"Poly Count: %d\",triCount );\n   76: 	sprintf(msText, \"Time: %d\",simulationTime);\n   77: 	//sprintf(drPkText, \"Dropped Packets: %u\", NET_GetDropedPackets());\n   78: 	//sprintf(netSentText,     \"Net_Sent: %d\", net.lastSentSequenceNumber);\n   79: 	//sprintf(netReceivedText, \"Net_Rcvd: %d\", net.lastReceivedSequenceNumber);\n   80  	\n   81  	\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/text.c:\n  101  		textLib.texts[i].ss_pos[Y] = textLib.texts[i].ss_start_pos[Y] + textLib.texts[i].diff[Y] * interpolation ;\n  102  		\n  103: 	//	printf(\"id=%d, posX=%d, posY=%d\\n\",i,textLib.texts[i].ss_pos[X],textLib.texts[i].ss_pos[Y]);\n  104  	}\n  105  }\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/texture.c:\n   54  	tex_cache_bucket_t* curr;\n   55  	\n   56: 	printf(\"	--Texture cache--\\n\");\n   57  	\n   58  	for (i=0; i< HASH_MAX_VALUE; i++) \n   ..\n   61  		while (curr != NULL) \n   62  		{\n   63: 			printf(\"	Tex (%d) = '%s' id=%d\\n\",i,curr->texture->path,curr->texture->textureId);\n   64  			curr=curr->next;\n   65  		}\n   66  	}\n   67  	\n   68: 	printf(\"	--END Texture cache END --\\n\");\n   69  	\n   70  }\n   ..\n  177  	else\n  178  	{\n  179: 		//printf(\"[MTL parser] Collision detected, while inserting '%s'.\\n\",mtlName);\n  180  		bucket = tex_hashtable[hashValue];\n  181  		\n  ...\n  273  	if (tmpTex->format == TEXTURE_TYPE_UNKNOWN)\n  274  	{\n  275: 		printf(\"[Texture loader] Texture type for %s is UNKNOWN !!\\n\",tmpTex->path);\n  276  	}\n  277  	\n  ...\n  290  		return;\n  291  	\n  292: 	//printf(\"TEX_MakeAvailable %s\\n\",tmpTex->path);\n  293  	\n  294  	\n  ...\n  297  	if (cacheTest != NULL)\n  298  	{\n  299: 		//printf(\"TEX_MakeAvailable cache it returning.\\n\");\n  300  		*tmpTex = *cacheTest;\n  301  		\n  ...\n  308  	if (tmpTex->memLocation == TEXT_MEM_LOC_VRAM)\n  309  	{\n  310: 		//printf(\"TEX_MakeAvailable already in vram, returning.\\n\");\n  311  		return ;\n  312  	}\n  ...\n  327  	if (!texture)\n  328  	{\n  329: 		printf(\"[TEX_UnloadTexture] Nothing to unload.\\n\");\n  330  		return;\n  331  	}\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/tha.c:\n   92  	bullet->text[1][V] = (enemy->parameters[PARAMETER_THA_LAST_BULLET_TYPE ]*THA_TEXT_BULLET_HEIGHT);\n   93  	\n   94: 	//printf(\"%d\\n\",bullet->text[1][V]);\n   95  	\n   96  	bullet->text[0][U] = THA_TEXT_BULLET_U + THA_TEXT_BULLET_WIDTH ;\n   ..\n  108  	bullet->posDiff[Y] = 2*SS_H*enemy->parameters[PARAMETER_THA_FIRING_DIRECTION];\n  109  	\n  110: 	//printf(\"enemy->parameters[PARAMETER_THA_LAST_BULLET_TYPE]=%.2f\\n\",enemy->parameters[PARAMETER_THA_LAST_BULLET_TYPE]);\n  111: 	//printf(\"(int)enemy->parameters[PARAMETER_THA_LAST_BULLET_TYPE]=%d\\n\",   (int)enemy->parameters[PARAMETER_THA_LAST_BULLET_TYPE]     );\n  112: 	//printf(\"(int)enemy->parameters[PARAMETER_THA_LAST_BULLET_TYPE]+1=%d\\n\",((int)(enemy->parameters[PARAMETER_THA_LAST_BULLET_TYPE])+1));\n  113: 	//printf(\"((int)(enemy->parameters[PARAMETER_THA_LAST_BULLET_TYPE])+1) & 3=%d\\n\",((int)(enemy->parameters[PARAMETER_THA_LAST_BULLET_TYPE])+1) & 3);\n  114: 	//printf(\"(float)(((int)(enemy->parameters[PARAMETER_THA_LAST_BULLET_TYPE])+1) & 3)=%.2f\\n\",(float)(((int)(enemy->parameters[PARAMETER_THA_LAST_BULLET_TYPE])+1) & 3));\n  115  	enemy->parameters[PARAMETER_THA_LAST_BULLET_TYPE] = (int)(enemy->parameters[PARAMETER_THA_LAST_BULLET_TYPE]+1) & 3;\n  116: 	//printf(\"POST enemy->parameters[PARAMETER_THA_LAST_BULLET_TYPE]=%.2f\\n\",enemy->parameters[PARAMETER_THA_LAST_BULLET_TYPE]);\n  117  	\n  118  	\n  ...\n  131  	//float f;\n  132  	\n  133: 	//printf(\"[THA] simulationTime -  enemy->lastTimeFired  = %d\\n\",simulationTime -  enemy->lastTimeFired );\n  134  	if (enemy->timeCounter < THA_TTR+enemy->parameters[PARAMETER_THA_FIRING_TIME] && \n  135  		 enemy->timeCounter >THA_TTR + 1000 &&\n  ...\n  181  	enemy->updateFunction =  THA_Spawning;\n  182  \n  183: //	printf(\"enemy->parameters[PARAMETER_THA_FIRING_DIRECTION]=%.2f\\n\",enemy->parameters[PARAMETER_THA_FIRING_DIRECTION]);\n  184: //	printf(\"enemy->parameters[PARAMETER_THA_FIRING_DIRECTION-1]=%.2f\\n\",enemy->parameters[PARAMETER_THA_FIRING_DIRECTION]-1);\n  185: //	printf(\"enemy->parameters[PARAMETER_THA_FIRING_DIRECTION]-1)/2=%.2f\\n\",(enemy->parameters[PARAMETER_THA_FIRING_DIRECTION]-1)/2);	\n  186: //	printf(\"enemy->parameters[PARAMETER_THA_FIRING_DIRECTION]-1)/2* M_PI=%.2f\\n\",(enemy->parameters[PARAMETER_THA_FIRING_DIRECTION]-1)/2* M_PI);\n  187  	enemy->entity.yAxisRot = (1-(enemy->parameters[PARAMETER_THA_FIRING_DIRECTION]-1)/2)* M_PI;\n  188  	\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/timer.c:\n   31  void Timer_ForceTimeIncrement(int ms)\n   32  {\n   33: 	printf(\"[Timer] !! WARNING !! Time increment is forced !! WARNING !!.\\n\");\n   34  	forcedTimeIncrement = ms;\n   35  }\n   ..\n   90  void Timer_tick(void)\n   91  {\n   92: 	//printf(\"t=%d\\n\",simulationTime);\n   93  	\n   94  	if (paused)\n   ..\n  154  	extraPrecision=0;\n  155  	timediff=0;\n  156: 	printf(\"[Timer] simulationTime = %d.\\n\",simulationTime);\n  157  }\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/titles.c:\n  103  	for(int i=0 ; i < 6 ; i++)\n  104  	{\n  105: 		;//printf(\"CREATE title i=%hd v[x]=%hd v[y]%hd\\n\",i,v_TitleBackground[i].pos[X],v_TitleBackground[i].pos[Y]);\n  106  	}\n  107  	*/\n  ...\n  244  		//SCR_ConvertTextToVertices(\"- Act completed ! - \",3,0,0,TEXT_CENTERED);\n  245  		\n  246: 		sprintf(statsString,\"Bullets fired:  %4d\",engine.playerStats.bulletsFired[controlledPlayer]);\n  247  		SCR_ConvertTextToVertices(statsString,2.6f,-200,-100,TEXT_NOT_CENTERED);\n  248  		\n  249: 		sprintf(statsString,\"Bullet # hits:  %4d\",engine.playerStats.bulletsHit[controlledPlayer]);\n  250  		SCR_ConvertTextToVertices(statsString,2.6f,-200,-150,TEXT_NOT_CENTERED);\n  251  		\n  252  		\n  253: 		//sprintf(statsString,\"Bullet %% hits:  %.f%%\",engine.playerStats.bulletsHit[controlledPlayer]/(float)engine.playerStats.bulletsFired[controlledPlayer]*100);\n  254  		//SCR_ConvertTextToVertices(statsString,2,-100*renderer.resolution,-200*renderer.resolution,TEXT_NOT_CENTERED);\n  255  		\n  256: 		sprintf(statsString,\"Total Score:  %6d\",players[controlledPlayer].score);\n  257  		SCR_ConvertTextToVertices(statsString,2.6f,-200,-200,TEXT_NOT_CENTERED);\n  258  		\n  259  		\n  260: 		sprintf(statsString,\"Enemy cleared:   %2.0f%%\",engine.playerStats.enemyDestroyed[controlledPlayer]/ engine.playerStats.numEnemies*100 );\n  261  		SCR_ConvertTextToVertices(statsString,2.6f,-200,-250,TEXT_NOT_CENTERED);\n  262  		SCR_RenderText();\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/trackmem.c:\n   49  static void trackMBDetails(struct memblk *mb)\n   50  {\n   51: 	printf(\"%d bytes allocated with \\\"%s\\\" at %s:%d\\n\", (int)mb->size, mb->expr, mb->file, mb->line);\n   52  }\n   53  \n   ..\n  112  			if (mb->magic == MAGIC2)\n  113  			{\n  114: 				printf(\"Attempt to free already freed memory:\\n\");\n  115  				trackMBDetails(mb);\n  116  			}\n  117  			else\n  118  			{\n  119: 				printf(\"Invalid free of ptr %p (expr=\\\"%s\\\" from %s:%d\\n\", (void *)ptr, expr, file, line);\n  120  			}\n  121  			return;\n  ...\n  138  void trackListAllocations(void)\n  139  {\n  140: 	printf(\"*** Allocation list start ***\\n\");\n  141  	if (!memblockList)\n  142  	{\n  143: 		printf(\">>> EMPTY <<<\\n\");\n  144  	}\n  145  	else\n  ...\n  151  		}\n  152  	}\n  153: 	printf(\"*** Allocation list end ***\\n\");\n  154  }\n  155  \n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/vis.c:\n   44  	\n   45  	if (TRACE_VISSET)\n   46: 		printf(\"Updating visibilitySet with t=%d and isKey=%d.\\n\",camera.currentFrame->time,wordVisUpdate->isKey);\n   47  	\n   48  	if (wordVisUpdate->isKey)\n   ..\n   52  			entityVisUpdate  = &wordVisUpdate->visSets[i] ;\n   53  	\n   54: 			//printf(\"	Entity:%d, #indices:%hu\\n\",entityVisUpdate->entityId, entityVisUpdate->numIndices);\n   55  			map[entityVisUpdate->entityId].numIndices = entityVisUpdate->numIndices;\n   56  			memcpy(map[entityVisUpdate->entityId].indices, entityVisUpdate->indices, entityVisUpdate->numIndices * sizeof(ushort));	\n   ..\n   58  			if (TRACE_VISSET)\n   59  			{\n   60: 				printf(\"	For entity %d (numIndices=%hd): \\n\",entityVisUpdate->entityId,map[entityVisUpdate->entityId].numIndices);\n   61  				for (j=0; j <  map[entityVisUpdate->entityId].numIndices ; j++) \n   62  				{\n   63: 					printf(\"%hd--\",map[entityVisUpdate->entityId].indices[j]);\n   64  				}\n   65: 				printf(\"\\n\");\n   66  			}\n   67  			\n   ..\n   95  				\n   96  //				if (simulationTime == 5072)\n   97: //					printf(\"Flipping tailing: @%hu -> @%hu.\\n\",entity->numIndices,entityVisUpdate->facesToRemove[toRemoveCursor]);\n   98  			\n   99  				vectorCopy( &(entity->indices[entity->numIndices]) ,  &(entity->indices[entityVisUpdate->facesToRemove[toRemoveCursor]]) );\n  ...\n  114  			if (TRACE_VISSET)\n  115  			{\n  116: 				printf(\"	For entity %d (numIndices=%hd): \\n\",entityVisUpdate->entityId,map[entityVisUpdate->entityId].numIndices);\n  117  				for (j=0; j <  map[entityVisUpdate->entityId].numIndices ; j++) \n  118  				{\n  119: 					printf(\"%hd--\",map[entityVisUpdate->entityId].indices[j]);\n  120  				}\n  121: 				printf(\"\\n\");\n  122  			}\n  123  		}\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/wavfile.c:\n  115  		iff_pdata += 4;\n  116  		iff_chunk_len = Wav_GetLittleLong();\n  117: 		printf( \"0x%x : %s (%d)\\n\", (int)(iff_pdata - 4), str, iff_chunk_len );\n  118  		iff_pdata += (iff_chunk_len + 1) & ~1;\n  119  		\n  ...\n  158  	if( ! (iff_pdata && ! strncmp( (const char *)iff_pdata + 8, \"WAVE\", 4 ) ) )\n  159  	{\n  160: 		printf( \"[LoadWavInfo]: Missing RIFF/WAVE chunks (%s)\\n\", filename );\n  161  		FS_CloseFile( hFile );\n  162  		\n  ...\n  170  	if( ! iff_pdata )\n  171  	{\n  172: 		printf( \"[LoadWavInfo]: Missing fmt chunk (%s)\\n\", filename );\n  173  		FS_CloseFile( hFile );\n  174  		\n  ...\n  180  	if( Wav_GetLittleShort() != 1 )\n  181  	{\n  182: 		printf( \"[LoadWavInfo]: Microsoft PCM format only (%s)\\n\", filename );\n  183  		FS_CloseFile( hFile );\n  184  		\n  ...\n  195  	if (info->sample_size != 1 && info->sample_size != 2)\n  196  	{\n  197: 		printf( \"[LoadWavInfo]: only 8 and 16 bit WAV files supported (%s)\\n\", filename );\n  198  		FS_CloseFile( hFile );\n  199  		\n  ...\n  208  	if( ! iff_pdata )\n  209  	{\n  210: 		printf( \"[LoadWavInfo]: missing 'data' chunk (%s)\\n\", filename );\n  211  		FS_CloseFile( hFile );\n  212  		\n  ...\n  219  	if( info->samples <= 0 )\n  220  	{\n  221: 		printf( \"[LoadWavInfo]: file with 0 samples (%s)\\n\", filename );\n  222  		FS_CloseFile( hFile );\n  223  		\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/world.c:\n   86  			if (num_map_entities+1 == MAX_NUM_ENTITIES)\n   87  			{\n   88: 				printf(\"Too many entities in the map.\\n\");\n   89  				exit(0);\n   90  			}\n   ..\n   94  			if (!ENT_LoadEntity(currentEntity,LE_getCurrentToken(),ENT_PARTIAL_DRAW) )\n   95  			{\n   96: 				printf(\"[World_ReadMD5s] Could not load entity: %s.\\n\",LE_getCurrentToken());\n   97  			}\n   98  			else\n   ..\n  122  	if (!mapFile)\n  123  	{\n  124: 		printf(\"Map file '%s' cannot be opened.\\n\",mapFileName);\n  125  		return;\n  126  	}\n  127  	\n  128: 	printf(\"[World_Loadmap] Found map: '%s'.\\n\",mapFileName);\n  129  	\n  130  	LE_pushLexer();\n  ...\n  138  		{\n  139  			World_ReadMatrix(currentMatrix);\n  140: 			//printf(\"Read matrix:\\n\");\n  141  			//matrix_print(currentMatrix);\n  142  		}\n  ...\n  153  				World_ReadMD5s(currentMatrix);\n  154  				//ENT_DumpEntityCache();\n  155: 				//printf(\"Loaded MD5:%s.\\n\",LE_getCurrentToken());\n  156  			}\n  157  		}\n  ...\n  160  	LE_popLexer();\n  161  	\n  162: 	printf(\"[World_Loadmap] Loaded map with: %d entities.\\n\",num_map_entities);\n  163  }\n  164  \n  ...\n  182  	if (!sceneFile)\n  183  	{\n  184: 		printf(\"Could not find scene file: %s.\\n\",filename);\n  185  		return;\n  186  	}\n  187  	\n  188: 	printf(\"[World_OpenScene] Found scene: '%s'.\\n\",filename);\n  189  	\n  190  	LE_pushLexer();\n  ...\n  380  \n  381  				LE_readToken();\n  382: 				//printf(\"lgiht token=%s\\n\",LE_getCurrentToken());\n  383  			}\n  384  		}\n  ...\n  401  				{\n  402  					camera.fov = LE_readReal();	\n  403: 					//printf(\"[Camera] fov=%.2f\\n\",camera.fov);\n  404  				}\n  405  				else \n  ...\n  407  				{\n  408  					camera.zNear = LE_readReal();	\n  409: 					//printf(\"[Camera] zNear=%.2f\\n\",camera.zNear);\n  410  				}\n  411  				else \n  ...\n  413  				{\n  414  					camera.zFar = LE_readReal();\n  415: 					//printf(\"[Camera] zFar=%.2f\\n\",camera.zFar);\n  416  				}\n  417  				else \n  ...\n  584  					strcpy(titleTexture.path,LE_getCurrentToken());\n  585  					TEX_MakeStaticAvailable(&titleTexture);\n  586: 				//	printf(\"titleTexture.textureId=%d\\n\",titleTexture.textureId);\n  587  				}\n  588  				else					\n\n613 matches across 55 files\n\n\nSearching 329 files for \"apkP\" (case sensitive)\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/android_utils.c:\n   55      mgr = AAssetManager_fromJava(env, assetManager); \n   56  \n   57:     const char* apkPath;\n   58      jboolean isCopy;\n   59:     apkPath = (*env)->GetStringUTFChars(env, apk, &isCopy);\n   60      sdCardPath = (*env)->GetStringUTFChars(env, sdcard, &isCopy);\n   61  \n   62:     //LOGI(\"Loading APK %s\", apkPath);\n   63:    APKArchive = zip_open(apkPath, 0, NULL);\n   64      if (APKArchive == NULL) {\n   65      LOGE(\"Error loading APK\");\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/android_utils.h:\n   41  };\n   42  \n   43: void Java_com_miadzin_shmup_TouchpadNAActivity_createAssetManager(JNIEnv* env, jclass clazz, jobject aM, jstring apkPath, jstring sdcard);\n   44  jobject getAssetManager();\n   45  \n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/Shmup.sublime-workspace:\n  292  			\"Read scene\",\n  293  			\"MAX_OSPATH\",\n  294: 			\"apkPath\",\n  295  			\"nit\",\n  296  			\"FS_OpenFile_Android\",\n\n6 matches across 3 files\n\n\nSearching 329 files for \"APKArchive\" (case sensitive)\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/android_utils.c:\n   16  #include <zip.h>\n   17  \n   18: struct zip *APKArchive;\n   19  const char* sdCardPath;\n   20  \n   ..\n   61  \n   62      //LOGI(\"Loading APK %s\", apkPath);\n   63:    APKArchive = zip_open(apkPath, 0, NULL);\n   64:     if (APKArchive == NULL) {\n   65      LOGE(\"Error loading APK\");\n   66      return;\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/android_utils.h:\n   23  #include <zip.h>\n   24  \n   25: extern struct zip *APKArchive;\n   26  \n   27  #define  LOG_TAG    \"libshmup\"\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/main.c:\n  120    tmpTex->format = TEXTURE_TYPE_UNKNOWN ;\n  121  \n  122:   file = zip_fopen(APKArchive, realPath, 0);\n  123    \n  124    //LOGI(\"[Android Main] Opening %s\", realPath);\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/filesystem.c:\n  106  	}\n  107  	#else\n  108: 	int zindex = zip_name_locate(APKArchive, netpath, 0);\n  109  	if (zindex < 0) {\n  110  		LOGE(\"ERROR: zip_name_locate: %s\\n\", netpath);\n  ...\n  114  	struct zip_stat zstat;\n  115  	zip_stat_init(&zstat);\n  116: 	if (zip_stat_index(APKArchive, zindex, 0, &zstat) != 0) {\n  117  		LOGE(\"ERROR: zip_stat_index: %s\\n\", netpath);\n  118  		return NULL;\n  119  	}\n  120  \n  121: 	struct zip_file* zfile = zip_fopen_index(APKArchive, zindex, 0);\n  122  	if (zfile == NULL) {\n  123  		LOGE(\"ERROR: zip_fopen_index: %s\\n\", netpath);\n\n8 matches across 4 files\n\n\nSearching 329 files for \"assets\" (case sensitive)\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/android_utils.c:\n  190      SLresult result;\n  191  \n  192:     char * filename = strndup(str + 7, sizeof (str) - 7); // GJT: Trim off the \"assets/\" part\n  193  \n  194      // use asset manager to open asset by filename\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/main.c:\n  237  	engineParameters |= GL_11_RENDERER ;\n  238    \n  239: 	setenv( \"RD\", \"assets\", 1 ); \n  240  	setenv( \"WD\", \"mnt/sdcard/app-data/com.miadzin.shmup\", 1 );\n  241  \n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/Shmup.sublime-workspace:\n   33  	\"file_history\":\n   34  	[\n   35: 		\"/Users/gjtorikian/Dropbox/workspace/Shelves/assets/html/versions.html\",\n   36: 		\"/Users/gjtorikian/Dropbox/workspace/Shelves/assets/html/about.html\",\n   37  		\"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/main.c\",\n   38  		\"/Users/gjtorikian/Desktop/jg.c\",\n   39: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/models/act1/SkyDome_Night.obj.md5mesh\",\n   40: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials/act1.mtl\",\n   41  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/world.c\",\n   42  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/dEngine.c\",\n   ..\n   47  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/commands.c\",\n   48  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/menu.c\",\n   49: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials/act1_pvr.mtl\",\n   50  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/android/android_utils.c\",\n   51  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/md5.c\",\n   52: 		\"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials.lbr\",\n   53  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/entities.c\",\n   54  		\"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/camera.c\",\n\n8 matches across 3 files\n\n\nSearching 329 files for \"prepend\" (case sensitive)\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/libpng/png.h:\n 2085     png_const_charp error_message)) PNG_NORETURN;\n 2086  \n 2087: /* The same, but the chunk name is prepended to the error string. */\n 2088  extern PNG_EXPORT(void,png_chunk_error) PNGARG((png_structp png_ptr,\n 2089     png_const_charp error_message)) PNG_NORETURN;\n ....\n 2098     png_const_charp warning_message));\n 2099  \n 2100: /* Non-fatal error in libpng, chunk name is prepended to message. */\n 2101  extern PNG_EXPORT(void,png_chunk_warning) PNGARG((png_structp png_ptr,\n 2102     png_const_charp warning_message));\n ....\n 2108     png_const_charp warning_message));\n 2109  \n 2110: /* Same, chunk name is prepended to message. */\n 2111  extern PNG_EXPORT(void,png_chunk_benign_error) PNGARG((png_structp png_ptr,\n 2112     png_const_charp warning_message));\n ....\n 2504  #define PNG_HANDLE_CHUNK_ALWAYS       3\n 2505  \n 2506: /* Strip the prepended error numbers (\"#nnn \") from error and warning\n 2507   * messages before passing them to the error or warning handler.\n 2508   */\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/camera.c:\n  251  }\n  252  \n  253: camera_frame_t* CAM_ReadFileCP2Binary(char* f,char prependGameDir)\n  254  {\n  255  	char* magicNumber = \"CP2B\" ;\n  ...\n  264  	\n  265  	memset(filename, 0, sizeof(filename));\n  266: 	if (prependGameDir)\n  267  	{\n  268  		strcat(filename, FS_Gamedir());\n\n6 matches across 2 files\n\n\nSearching 329 files for \"getAndroidFilename\" (case sensitive)\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/android_utils.c:\n  305  }\n  306  \n  307: char * getAndroidFilename( char *filename )\n  308  {\n  309      char sdcardpath[ MAX_OSPATH ];\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/android_utils.h:\n   57  void shutdownAudio();\n   58  \n   59: char * getAndroidFilename( char *filename );\n   60  \n   61  #endif\n\n/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/camera.c:\n  275  	fileHandle = fopen(filename, \"rb\");\n  276  	#else\n  277: 	fileHandle = fopen(getAndroidFilename(filename), \"rb\");\n  278  	#endif\n  279  \n\n3 matches across 3 files\n",
			"settings":
			{
				"buffer_size": 123523,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "jni/src/camera.c",
			"settings":
			{
				"buffer_size": 10643,
				"line_ending": "Unix"
			}
		},
		{
			"file": "jni/android/android_utils.h",
			"settings":
			{
				"buffer_size": 1443,
				"line_ending": "Unix"
			}
		},
		{
			"file": "jni/android/android_utils.c",
			"settings":
			{
				"buffer_size": 10782,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/com/miadzin/shmup/TouchpadNAActivity.java",
			"settings":
			{
				"buffer_size": 4854,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 122.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": true,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/android/android_utils.h",
		"/Users/gjtorikian/Dropbox/workspace/Shmup/assets/data/materials.lbr",
		"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/dEngine.h",
		"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/netchannel.c",
		"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/menu.c",
		"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/renderer.c",
		"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/texture.c",
		"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/renderer_fixed.c",
		"/Users/gjtorikian/Dropbox/workspace/Shmup/assets/data/materials/players.mtl",
		"/Users/gjtorikian/Dropbox/workspace/Shmup/assets/data/materials/act1_pvr.mtl",
		"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/filesystem.c",
		"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/md5.c",
		"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/entities.c",
		"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/renderer_progr.c",
		"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/Android.mk",
		"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/ItextureLoader.c",
		"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src/ItextureLoader.h",
		"/Users/gjtorikian/Desktop/jg.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/models/act1/SkyDome_Night.obj.md5mesh",
		"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials/act1.mtl",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/world.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/dEngine.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/enemy.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/android/main.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/filesystem.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/dEngine.h",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/commands.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/menu.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials/act1_pvr.mtl",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/android/android_utils.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/md5.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/assets/data/materials.lbr",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/entities.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/camera.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/sounds.c",
		"/Users/gjtorikian/Dropbox/workspace/shmup/jni/src/material.c",
		"/Users/gjtorikian/Dropbox/native-activity/src/com/miadzin/shmup/TouchpadNAActivity.java",
		"/Users/gjtorikian/Dropbox/native-activity/jni/android/android_utils.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/filesystem.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/libzip/zipint.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/Android.mk",
		"/Users/gjtorikian/Dropbox/native-activity/jni/libzip/Android.mk",
		"/Users/gjtorikian/Dropbox/native-activity/jni/Application.mk",
		"/Users/gjtorikian/Dropbox/native-activity/jni/libpng/Android.mk",
		"/Users/gjtorikian/Dropbox/native-activity/jni/libzip/config.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/matrix.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/math_shmup.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/math.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/collisions.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/commands.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/dEngine.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/enemy.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/enemy_particules.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/fx.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/ItextureLoader.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/material.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/md5.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/menu.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/preproc.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/camera.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/quaternion.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/renderer.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/event.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/event.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/md5.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/entities.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/android/Android.mk",
		"/Users/gjtorikian/Dropbox/native-activity/jni/android/main.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/android/android_utils.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/openal/Android.mk",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/filesystem.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/commands.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/titles.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/renderer.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/preproc.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/menu.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/openal/src/Alc/android.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/camera.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/dEngine.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/renderer_fixed.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/texture.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/android/androidEGL.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/sounds.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/android/native_app_glue.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/android/native_app_glue.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/openal/src/Alc/alcReverb.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/openal/src/Alc/ALc.c",
		"/Users/gjtorikian/Dropbox/native-activity/jni/openal/src/OpenAL32/Include/alMain.h",
		"/Users/gjtorikian/Dropbox/native-activity/jni/src/sounds.h",
		"/Users/gjtorikian/Dropbox/native-activity/src/com/miadzin/shmup/ShmupAudio.java",
		"/Users/gjtorikian/Dropbox/native-activity/openal/Android.mk",
		"/Users/gjtorikian/Dropbox/native-activity/openal/Alc/ALc.c",
		"/Users/gjtorikian/Dropbox/native-activity/shmup.sublime-project",
		"/Users/gjtorikian/Dropbox/native-activity/AndroidManifest.xml",
		"/Users/gjtorikian/Dropbox/native-activity/build.xml",
		"/Users/gjtorikian/Dropbox/native-activity/default.properties",
		"/Users/gjtorikian/Dropbox/native-activity/dump.txt",
		"/Users/gjtorikian/Dropbox/native-activity/local.properties",
		"/Users/gjtorikian/Dropbox/native-activity/p2.pvr",
		"/Users/gjtorikian/Dropbox/native-activity/proguard.cfg",
		"/Users/gjtorikian/Developer/native-activity/jni/android/androidEGL.h",
		"/Users/gjtorikian/Developer/native-activity/jni/src/world.c",
		"/Users/gjtorikian/Developer/native-activity/jni/src/event.c",
		"/Users/gjtorikian/Developer/native-activity/jni/src/lexer.c",
		"/Users/gjtorikian/Developer/native-activity/jni/src/menu.c",
		"/Users/gjtorikian/Developer/native-activity/jni/src/sounds.c",
		"/Users/gjtorikian/Developer/native-activity/jni/src/renderer_fixed.c",
		"/Users/gjtorikian/Developer/native-activity/jni/src/filesystem.c",
		"/Users/gjtorikian/Developer/native-activity/jni/android/main.c",
		"/Users/gjtorikian/Developer/native-activity/jni/src/dEngine.c",
		"/Users/gjtorikian/Developer/native-activity/jni/src/music.h",
		"/Users/gjtorikian/Library/Application Support/Sublime Text 2/Packages/User/Base File.sublime-settings",
		"/Users/gjtorikian/Developer/native-activity/jni/android/openal/Alc/ALc.c",
		"/Users/gjtorikian/Developer/native-activity/jni/android/openal/Alc/ALu.c",
		"/Users/gjtorikian/Developer/native-activity/jni/Android.mk",
		"/Users/gjtorikian/Developer/native-activity/openal/OpenAL32/alSource.c",
		"/Users/gjtorikian/Developer/native-activity/AndroidManifest.xml",
		"/Users/gjtorikian/Developer/native-activity/jni/Application.mk",
		"/Users/gjtorikian/Developer/native-activity/jni/android/libpng/Android.mk",
		"/Users/gjtorikian/Developer/native-activity/jni/src/sounds.h",
		"/Users/gjtorikian/Developer/native-activity/openal/Alc/ALc.c",
		"/Users/gjtorikian/Developer/native-activity/openal/android/jni/example.c",
		"/Users/gjtorikian/Developer/native-activity/jni/src/fx.c",
		"/Users/gjtorikian/Developer/native-activity/jni/src/texture.c",
		"/Users/gjtorikian/Desktop/test.txt",
		"/Users/gjtorikian/Developer/native-activity/jni/android/openal/include/AL/alext.h",
		"/Users/gjtorikian/Developer/native-activity/jni/android/openal/include/AL/alc.h",
		"/Users/gjtorikian/Developer/native-activity/jni/android/openal/Android.mk"
	],
	"find":
	{
		"height": 33.0
	},
	"find_in_files":
	{
		"height": 85.0,
		"include_history":
		[
			"*",
			"*.c, *.h",
			"*.c",
			""
		],
		"location_history":
		[
			"/Users/gjtorikian/Dropbox/workspace/Shmup/jni",
			"/Users/gjtorikian/Dropbox/workspace/Shmup/",
			"/Users/gjtorikian/Dropbox/workspace/Shmup/jni/src",
			"/Users/gjtorikian/Dropbox/workspace/shmup",
			"/Users/gjtorikian/Dropbox/native-activity",
			"/Users/gjtorikian/Developer/native-activity/jni",
			"/Users/gjtorikian/Developer/native-activity/",
			"/Users/gjtorikian/Developer/native-activity/jni",
			"/Users/gjtorikian/Developer/native-activity/jni/src",
			"<open folders>"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"getAndroidFilename",
			"prepend",
			"assets",
			"APKArchive",
			"apkP",
			"printf(",
			"createAssetManager",
			"sdCardPath",
			"Environment",
			"apkPath",
			"createAssetManager",
			"asset",
			"ANDROID",
			"return 0",
			"return;",
			"process",
			"onInputEvent",
			"engine_handle_input",
			"AINPUT_SOURCE_TOUCHPAD",
			"engine_handle_input",
			"CreateAudioPlayer",
			"input",
			"engine_handle_cmd",
			"engine_handle_input",
			"SND_PauseSoundTrack",
			"isPlaying",
			"MENU_Init",
			"DIFFICULTY_EASY",
			"EASY",
			"min_dis",
			"MENU_GetCurrentButtonTouches",
			"prev_touchstate",
			"DEBUG MOVE",
			"nomenu",
			"prev_touchstate",
			"Tick",
			"SKIP_TICKS",
			"AMOTION_EVENT_ACTION_POINTER_UP",
			"action",
			"minDist",
			"iphone_size",
			"initAndroidSound",
			"createSoundEngine",
			"engineObject",
			"slCreateEngine",
			"createSoundEngine",
			"resolution",
			"1.5",
			"iphone_size",
			"iphone_coo_SysPos[X]",
			"accelerometerSensor",
			"motion",
			"onInputEvent",
			"engine_handle_input",
			"isPlaying",
			"AMotionEvent_getPointerId",
			"pvr",
			"p2.pn",
			"GPUF",
			"UpLoadTextureToGpu",
			"UpLoadTextureToGPUF",
			"color",
			"texture->file",
			"FS_CloseFile",
			"Still mat",
			"still",
			"meshmat",
			"MENU_CreateButtonWithTag",
			"MENU_CreateButton",
			"New Game",
			"Play",
			"Shmup",
			"loadNativePNG",
			"loadNativePVRT",
			"pvr",
			"glGenerateMipmap",
			"GL_GENERATE_MIPMAP",
			"FONT_PATH",
			"map",
			"min",
			"minmap",
			"TEX_MakeStaticAvailable",
			"FONT_PATH",
			"font.png",
			"png_init_io",
			"png_byte",
			"texture_t",
			"SCR_CheckErrors",
			"glTexImage2D",
			"file is not",
			"->data",
			"tmpTex->data",
			"fht",
			"MD5_ReadMesh",
			"cleanUpDoubleQuotes",
			"High",
			"_Night",
			"cleanUpDoubleQuotes",
			"str",
			"Double",
			"cleanUpDoubleQuotes",
			"mesh->materialName",
			"meshmat",
			"grabbing en",
			"cleanUpDoubleQuotes",
			"shader",
			"MATLIB_Create",
			"materialName",
			"MD5_ReadMesh",
			"MD5_LoadMesh",
			"Unknown materi",
			"Unknown mater",
			"materialName",
			"MD5_LoadMesh",
			"Unknown mater",
			"act1.mtl",
			"SkyDome_Nigh",
			"Error ***",
			"Error",
			"SkyDome_Nigh",
			"ENT_LoadEntity *****ERROR******]",
			"commScale",
			"1.5",
			"commScale",
			"ENT_LoadEntity",
			"ENE_Precache",
			"start scene",
			"MENU_Set"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"string",
			"#include \"math_shmup.h\"",
			"ANDROID_PATH",
			"env",
			"envNA",
			"Shmup",
			"openal",
			"",
			".h>",
			"#include <",
			"",
			"engine_info_t*",
			"h_engine->",
			"engine.",
			"engine->",
			"engine.",
			"engine_info_t",
			"engine.",
			"bytep"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "jni/android/main.c",
					"settings":
					{
						"buffer_size": 19601,
						"regions":
						{
						},
						"selection":
						[
							[
								2768,
								2777
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7719.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"settings":
					{
						"buffer_size": 123523,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										218,
										240
									],
									[
										538,
										545
									],
									[
										757,
										764
									],
									[
										820,
										827
									],
									[
										839,
										846
									],
									[
										1164,
										1171
									],
									[
										1492,
										1499
									],
									[
										1789,
										1796
									],
									[
										2068,
										2075
									],
									[
										2099,
										2106
									],
									[
										2249,
										2256
									],
									[
										2334,
										2341
									],
									[
										2419,
										2426
									],
									[
										2522,
										2529
									],
									[
										2749,
										2756
									],
									[
										2985,
										2992
									],
									[
										3027,
										3034
									],
									[
										3132,
										3139
									],
									[
										3319,
										3326
									],
									[
										3448,
										3455
									],
									[
										3738,
										3745
									],
									[
										3941,
										3948
									],
									[
										4121,
										4128
									],
									[
										4160,
										4167
									],
									[
										4398,
										4405
									],
									[
										4588,
										4595
									],
									[
										4749,
										4756
									],
									[
										4876,
										4883
									],
									[
										5055,
										5062
									],
									[
										5184,
										5191
									],
									[
										5350,
										5357
									],
									[
										5535,
										5542
									],
									[
										5698,
										5705
									],
									[
										5847,
										5854
									],
									[
										6024,
										6031
									],
									[
										6164,
										6171
									],
									[
										6352,
										6359
									],
									[
										6523,
										6530
									],
									[
										6699,
										6706
									],
									[
										6867,
										6874
									],
									[
										7010,
										7017
									],
									[
										7207,
										7214
									],
									[
										7390,
										7397
									],
									[
										7689,
										7696
									],
									[
										7892,
										7899
									],
									[
										8084,
										8091
									],
									[
										8244,
										8251
									],
									[
										8521,
										8526
									],
									[
										8738,
										8743
									],
									[
										8802,
										8807
									],
									[
										8924,
										8929
									],
									[
										9084,
										9089
									],
									[
										9124,
										9129
									],
									[
										9146,
										9151
									],
									[
										9217,
										9222
									],
									[
										9311,
										9316
									],
									[
										9537,
										9542
									],
									[
										9585,
										9590
									],
									[
										9636,
										9641
									],
									[
										9721,
										9726
									],
									[
										9824,
										9829
									],
									[
										9901,
										9906
									],
									[
										10024,
										10029
									],
									[
										10205,
										10210
									],
									[
										10472,
										10477
									],
									[
										10541,
										10546
									],
									[
										10583,
										10588
									],
									[
										10813,
										10818
									],
									[
										10944,
										10949
									],
									[
										11043,
										11048
									],
									[
										11384,
										11389
									],
									[
										11589,
										11594
									],
									[
										11839,
										11844
									],
									[
										11921,
										11926
									],
									[
										12114,
										12119
									],
									[
										12218,
										12223
									],
									[
										12593,
										12598
									],
									[
										12832,
										12837
									],
									[
										13224,
										13231
									],
									[
										13496,
										13503
									],
									[
										13746,
										13753
									],
									[
										14016,
										14023
									],
									[
										14197,
										14204
									],
									[
										14532,
										14539
									],
									[
										14866,
										14873
									],
									[
										15130,
										15137
									],
									[
										15502,
										15509
									],
									[
										15682,
										15689
									],
									[
										15852,
										15859
									],
									[
										15873,
										15880
									],
									[
										15943,
										15950
									],
									[
										16047,
										16054
									],
									[
										16256,
										16263
									],
									[
										16373,
										16380
									],
									[
										16469,
										16476
									],
									[
										16571,
										16578
									],
									[
										16679,
										16686
									],
									[
										16744,
										16751
									],
									[
										16890,
										16897
									],
									[
										17009,
										17016
									],
									[
										17105,
										17112
									],
									[
										17192,
										17199
									],
									[
										17301,
										17308
									],
									[
										17369,
										17376
									],
									[
										17560,
										17567
									],
									[
										17789,
										17796
									],
									[
										18021,
										18028
									],
									[
										18273,
										18280
									],
									[
										18450,
										18457
									],
									[
										18605,
										18612
									],
									[
										18782,
										18789
									],
									[
										18940,
										18947
									],
									[
										19117,
										19124
									],
									[
										19331,
										19338
									],
									[
										19546,
										19553
									],
									[
										19782,
										19789
									],
									[
										19939,
										19946
									],
									[
										20207,
										20214
									],
									[
										20405,
										20412
									],
									[
										20527,
										20534
									],
									[
										20664,
										20671
									],
									[
										20806,
										20813
									],
									[
										21048,
										21055
									],
									[
										21220,
										21227
									],
									[
										21367,
										21374
									],
									[
										21516,
										21523
									],
									[
										21790,
										21797
									],
									[
										22003,
										22010
									],
									[
										22275,
										22282
									],
									[
										22455,
										22462
									],
									[
										22645,
										22652
									],
									[
										22751,
										22758
									],
									[
										22976,
										22983
									],
									[
										23137,
										23144
									],
									[
										23385,
										23392
									],
									[
										23541,
										23548
									],
									[
										23758,
										23765
									],
									[
										23889,
										23896
									],
									[
										24136,
										24143
									],
									[
										24426,
										24433
									],
									[
										24728,
										24735
									],
									[
										24920,
										24927
									],
									[
										25096,
										25103
									],
									[
										25308,
										25315
									],
									[
										25508,
										25515
									],
									[
										25721,
										25728
									],
									[
										25755,
										25762
									],
									[
										25833,
										25840
									],
									[
										25923,
										25930
									],
									[
										26183,
										26190
									],
									[
										26293,
										26300
									],
									[
										26552,
										26559
									],
									[
										26767,
										26774
									],
									[
										26877,
										26884
									],
									[
										26985,
										26992
									],
									[
										27258,
										27265
									],
									[
										27472,
										27479
									],
									[
										27644,
										27651
									],
									[
										27821,
										27828
									],
									[
										28035,
										28042
									],
									[
										28206,
										28213
									],
									[
										28420,
										28427
									],
									[
										28584,
										28591
									],
									[
										28749,
										28756
									],
									[
										28913,
										28920
									],
									[
										29091,
										29098
									],
									[
										29170,
										29177
									],
									[
										29395,
										29402
									],
									[
										29680,
										29687
									],
									[
										29790,
										29797
									],
									[
										29968,
										29975
									],
									[
										30139,
										30146
									],
									[
										30376,
										30383
									],
									[
										30451,
										30458
									],
									[
										30701,
										30708
									],
									[
										30882,
										30889
									],
									[
										31190,
										31197
									],
									[
										31373,
										31380
									],
									[
										31553,
										31560
									],
									[
										31732,
										31739
									],
									[
										31977,
										31984
									],
									[
										32198,
										32205
									],
									[
										32378,
										32385
									],
									[
										32513,
										32520
									],
									[
										32745,
										32752
									],
									[
										32949,
										32956
									],
									[
										33148,
										33155
									],
									[
										33311,
										33318
									],
									[
										33333,
										33340
									],
									[
										33509,
										33516
									],
									[
										33531,
										33538
									],
									[
										33571,
										33578
									],
									[
										33613,
										33620
									],
									[
										33655,
										33662
									],
									[
										33728,
										33735
									],
									[
										33750,
										33757
									],
									[
										33790,
										33797
									],
									[
										33832,
										33839
									],
									[
										33882,
										33889
									],
									[
										33933,
										33940
									],
									[
										33955,
										33962
									],
									[
										34059,
										34066
									],
									[
										34157,
										34164
									],
									[
										34396,
										34403
									],
									[
										34570,
										34577
									],
									[
										34737,
										34744
									],
									[
										34946,
										34953
									],
									[
										35123,
										35130
									],
									[
										35281,
										35288
									],
									[
										35625,
										35632
									],
									[
										35791,
										35798
									],
									[
										36025,
										36032
									],
									[
										36175,
										36182
									],
									[
										36303,
										36310
									],
									[
										36485,
										36492
									],
									[
										36586,
										36593
									],
									[
										36813,
										36820
									],
									[
										36952,
										36959
									],
									[
										37104,
										37111
									],
									[
										37223,
										37230
									],
									[
										37540,
										37547
									],
									[
										37689,
										37696
									],
									[
										37818,
										37825
									],
									[
										37978,
										37985
									],
									[
										38144,
										38151
									],
									[
										38328,
										38335
									],
									[
										38805,
										38812
									],
									[
										38991,
										38998
									],
									[
										39096,
										39103
									],
									[
										39243,
										39250
									],
									[
										39445,
										39452
									],
									[
										39560,
										39567
									],
									[
										39720,
										39727
									],
									[
										39878,
										39885
									],
									[
										40037,
										40044
									],
									[
										40274,
										40281
									],
									[
										40571,
										40578
									],
									[
										40726,
										40733
									],
									[
										40983,
										40990
									],
									[
										41276,
										41283
									],
									[
										41490,
										41497
									],
									[
										41531,
										41538
									],
									[
										41649,
										41656
									],
									[
										41694,
										41701
									],
									[
										41791,
										41798
									],
									[
										41868,
										41875
									],
									[
										41982,
										41989
									],
									[
										42121,
										42128
									],
									[
										42305,
										42312
									],
									[
										42464,
										42471
									],
									[
										42607,
										42614
									],
									[
										42707,
										42714
									],
									[
										42849,
										42856
									],
									[
										43076,
										43083
									],
									[
										43246,
										43253
									],
									[
										43421,
										43428
									],
									[
										43591,
										43598
									],
									[
										43848,
										43855
									],
									[
										44065,
										44072
									],
									[
										44234,
										44241
									],
									[
										44449,
										44456
									],
									[
										44557,
										44564
									],
									[
										44635,
										44642
									],
									[
										44804,
										44811
									],
									[
										44883,
										44890
									],
									[
										45179,
										45186
									],
									[
										45378,
										45385
									],
									[
										45459,
										45466
									],
									[
										45697,
										45704
									],
									[
										45794,
										45801
									],
									[
										46139,
										46146
									],
									[
										46439,
										46446
									],
									[
										46615,
										46622
									],
									[
										46775,
										46782
									],
									[
										46922,
										46929
									],
									[
										47125,
										47132
									],
									[
										47272,
										47279
									],
									[
										47415,
										47422
									],
									[
										47589,
										47596
									],
									[
										47653,
										47660
									],
									[
										47804,
										47811
									],
									[
										47905,
										47912
									],
									[
										48034,
										48041
									],
									[
										48241,
										48248
									],
									[
										48310,
										48317
									],
									[
										48379,
										48386
									],
									[
										48452,
										48459
									],
									[
										48527,
										48534
									],
									[
										48602,
										48609
									],
									[
										48673,
										48680
									],
									[
										48747,
										48754
									],
									[
										48843,
										48850
									],
									[
										48991,
										48998
									],
									[
										49242,
										49249
									],
									[
										49456,
										49463
									],
									[
										49617,
										49624
									],
									[
										49770,
										49777
									],
									[
										49818,
										49825
									],
									[
										49850,
										49857
									],
									[
										49938,
										49945
									],
									[
										50091,
										50098
									],
									[
										50139,
										50146
									],
									[
										50171,
										50178
									],
									[
										50304,
										50311
									],
									[
										50451,
										50458
									],
									[
										50713,
										50720
									],
									[
										50988,
										50995
									],
									[
										51128,
										51135
									],
									[
										51240,
										51247
									],
									[
										51513,
										51520
									],
									[
										51798,
										51805
									],
									[
										52057,
										52064
									],
									[
										52300,
										52307
									],
									[
										52565,
										52572
									],
									[
										52778,
										52785
									],
									[
										53030,
										53037
									],
									[
										53224,
										53231
									],
									[
										53474,
										53481
									],
									[
										53707,
										53714
									],
									[
										54031,
										54038
									],
									[
										54247,
										54254
									],
									[
										54413,
										54420
									],
									[
										54584,
										54591
									],
									[
										54686,
										54693
									],
									[
										54885,
										54892
									],
									[
										55034,
										55041
									],
									[
										55101,
										55108
									],
									[
										55170,
										55177
									],
									[
										55312,
										55319
									],
									[
										55429,
										55436
									],
									[
										55608,
										55615
									],
									[
										55706,
										55713
									],
									[
										55986,
										55993
									],
									[
										56187,
										56194
									],
									[
										56356,
										56363
									],
									[
										56557,
										56564
									],
									[
										56648,
										56655
									],
									[
										56817,
										56824
									],
									[
										57011,
										57018
									],
									[
										57195,
										57202
									],
									[
										57344,
										57351
									],
									[
										57577,
										57584
									],
									[
										57716,
										57723
									],
									[
										57802,
										57809
									],
									[
										57857,
										57864
									],
									[
										58199,
										58206
									],
									[
										58314,
										58321
									],
									[
										58622,
										58629
									],
									[
										58802,
										58809
									],
									[
										59037,
										59044
									],
									[
										59231,
										59238
									],
									[
										59438,
										59445
									],
									[
										59633,
										59640
									],
									[
										59775,
										59782
									],
									[
										59965,
										59972
									],
									[
										60152,
										60159
									],
									[
										60319,
										60326
									],
									[
										60448,
										60455
									],
									[
										60497,
										60504
									],
									[
										60690,
										60697
									],
									[
										60869,
										60876
									],
									[
										61000,
										61007
									],
									[
										61258,
										61265
									],
									[
										61414,
										61421
									],
									[
										61568,
										61575
									],
									[
										61667,
										61674
									],
									[
										61736,
										61743
									],
									[
										61879,
										61886
									],
									[
										62038,
										62045
									],
									[
										62171,
										62178
									],
									[
										62288,
										62295
									],
									[
										62535,
										62542
									],
									[
										62719,
										62726
									],
									[
										62839,
										62846
									],
									[
										63038,
										63045
									],
									[
										63225,
										63232
									],
									[
										63430,
										63437
									],
									[
										63492,
										63499
									],
									[
										63785,
										63792
									],
									[
										63948,
										63955
									],
									[
										64226,
										64233
									],
									[
										64470,
										64477
									],
									[
										64687,
										64694
									],
									[
										64742,
										64749
									],
									[
										64947,
										64954
									],
									[
										65148,
										65155
									],
									[
										65277,
										65284
									],
									[
										65471,
										65478
									],
									[
										65633,
										65640
									],
									[
										65836,
										65843
									],
									[
										65989,
										65996
									],
									[
										66087,
										66094
									],
									[
										66270,
										66277
									],
									[
										66410,
										66417
									],
									[
										66634,
										66641
									],
									[
										66744,
										66751
									],
									[
										66812,
										66819
									],
									[
										66947,
										66954
									],
									[
										67059,
										67066
									],
									[
										67214,
										67221
									],
									[
										67356,
										67363
									],
									[
										67542,
										67549
									],
									[
										67837,
										67844
									],
									[
										68059,
										68066
									],
									[
										68126,
										68133
									],
									[
										68244,
										68251
									],
									[
										68311,
										68318
									],
									[
										68481,
										68488
									],
									[
										68581,
										68588
									],
									[
										68926,
										68933
									],
									[
										69176,
										69183
									],
									[
										69388,
										69395
									],
									[
										69486,
										69493
									],
									[
										69810,
										69817
									],
									[
										69976,
										69983
									],
									[
										70127,
										70134
									],
									[
										70217,
										70224
									],
									[
										70392,
										70399
									],
									[
										70713,
										70720
									],
									[
										70876,
										70883
									],
									[
										71065,
										71072
									],
									[
										71195,
										71202
									],
									[
										71285,
										71292
									],
									[
										71384,
										71391
									],
									[
										71551,
										71558
									],
									[
										71700,
										71707
									],
									[
										71786,
										71793
									],
									[
										71896,
										71903
									],
									[
										71970,
										71977
									],
									[
										72116,
										72123
									],
									[
										72197,
										72204
									],
									[
										72251,
										72258
									],
									[
										72331,
										72338
									],
									[
										72528,
										72535
									],
									[
										72726,
										72733
									],
									[
										72810,
										72817
									],
									[
										72867,
										72874
									],
									[
										72949,
										72956
									],
									[
										73052,
										73059
									],
									[
										73130,
										73137
									],
									[
										73358,
										73365
									],
									[
										73536,
										73543
									],
									[
										73652,
										73659
									],
									[
										73953,
										73960
									],
									[
										74108,
										74115
									],
									[
										74254,
										74261
									],
									[
										74377,
										74384
									],
									[
										74591,
										74598
									],
									[
										74725,
										74732
									],
									[
										74861,
										74868
									],
									[
										75030,
										75037
									],
									[
										75192,
										75199
									],
									[
										75424,
										75431
									],
									[
										75773,
										75780
									],
									[
										76011,
										76018
									],
									[
										76106,
										76113
									],
									[
										76318,
										76325
									],
									[
										76608,
										76615
									],
									[
										76693,
										76700
									],
									[
										76937,
										76944
									],
									[
										77060,
										77067
									],
									[
										77195,
										77202
									],
									[
										77349,
										77356
									],
									[
										77561,
										77568
									],
									[
										77834,
										77841
									],
									[
										77903,
										77910
									],
									[
										77971,
										77978
									],
									[
										78180,
										78187
									],
									[
										78215,
										78222
									],
									[
										78304,
										78311
									],
									[
										78607,
										78614
									],
									[
										78835,
										78842
									],
									[
										79089,
										79096
									],
									[
										79341,
										79348
									],
									[
										79596,
										79603
									],
									[
										79719,
										79726
									],
									[
										79845,
										79852
									],
									[
										80048,
										80055
									],
									[
										80197,
										80204
									],
									[
										80420,
										80427
									],
									[
										80650,
										80657
									],
									[
										80810,
										80817
									],
									[
										81024,
										81031
									],
									[
										81260,
										81267
									],
									[
										81398,
										81405
									],
									[
										81538,
										81545
									],
									[
										81679,
										81686
									],
									[
										81820,
										81827
									],
									[
										81962,
										81969
									],
									[
										82103,
										82110
									],
									[
										82212,
										82219
									],
									[
										82432,
										82439
									],
									[
										82609,
										82616
									],
									[
										82737,
										82744
									],
									[
										82839,
										82846
									],
									[
										82990,
										82997
									],
									[
										83046,
										83053
									],
									[
										83137,
										83144
									],
									[
										83323,
										83330
									],
									[
										83490,
										83497
									],
									[
										83550,
										83557
									],
									[
										83593,
										83600
									],
									[
										83720,
										83727
									],
									[
										83946,
										83953
									],
									[
										84097,
										84104
									],
									[
										84277,
										84284
									],
									[
										84457,
										84464
									],
									[
										84701,
										84708
									],
									[
										84908,
										84915
									],
									[
										85164,
										85171
									],
									[
										85265,
										85272
									],
									[
										85398,
										85405
									],
									[
										85598,
										85605
									],
									[
										85769,
										85776
									],
									[
										85932,
										85939
									],
									[
										86143,
										86150
									],
									[
										86318,
										86325
									],
									[
										86515,
										86522
									],
									[
										86665,
										86672
									],
									[
										86828,
										86835
									],
									[
										87020,
										87027
									],
									[
										87157,
										87164
									],
									[
										87372,
										87379
									],
									[
										87519,
										87526
									],
									[
										87746,
										87753
									],
									[
										87980,
										87987
									],
									[
										88052,
										88059
									],
									[
										88196,
										88203
									],
									[
										88447,
										88454
									],
									[
										88682,
										88689
									],
									[
										89104,
										89111
									],
									[
										89351,
										89358
									],
									[
										89497,
										89504
									],
									[
										89647,
										89654
									],
									[
										89853,
										89860
									],
									[
										90119,
										90126
									],
									[
										90291,
										90298
									],
									[
										90460,
										90467
									],
									[
										90646,
										90653
									],
									[
										90837,
										90844
									],
									[
										91131,
										91138
									],
									[
										91225,
										91232
									],
									[
										91325,
										91332
									],
									[
										91429,
										91436
									],
									[
										91550,
										91557
									],
									[
										91722,
										91729
									],
									[
										91914,
										91921
									],
									[
										92203,
										92210
									],
									[
										92544,
										92551
									],
									[
										92774,
										92781
									],
									[
										92849,
										92856
									],
									[
										93013,
										93020
									],
									[
										93078,
										93085
									],
									[
										93316,
										93323
									],
									[
										93460,
										93467
									],
									[
										93681,
										93688
									],
									[
										93819,
										93826
									],
									[
										94094,
										94101
									],
									[
										94514,
										94521
									],
									[
										94633,
										94640
									],
									[
										94809,
										94816
									],
									[
										94984,
										94991
									],
									[
										95124,
										95131
									],
									[
										95198,
										95205
									],
									[
										95313,
										95320
									],
									[
										95429,
										95436
									],
									[
										95547,
										95554
									],
									[
										95652,
										95659
									],
									[
										95727,
										95734
									],
									[
										95856,
										95863
									],
									[
										96002,
										96009
									],
									[
										96146,
										96153
									],
									[
										96281,
										96288
									],
									[
										96488,
										96495
									],
									[
										96667,
										96674
									],
									[
										96885,
										96892
									],
									[
										97066,
										97073
									],
									[
										97160,
										97167
									],
									[
										97260,
										97267
									],
									[
										97364,
										97371
									],
									[
										97485,
										97492
									],
									[
										97638,
										97645
									],
									[
										97775,
										97782
									],
									[
										97889,
										97896
									],
									[
										98079,
										98086
									],
									[
										98212,
										98219
									],
									[
										98345,
										98352
									],
									[
										98488,
										98495
									],
									[
										98693,
										98700
									],
									[
										99043,
										99050
									],
									[
										99257,
										99264
									],
									[
										99447,
										99454
									],
									[
										99656,
										99663
									],
									[
										99852,
										99859
									],
									[
										99930,
										99937
									],
									[
										100138,
										100145
									],
									[
										100268,
										100275
									],
									[
										100402,
										100409
									],
									[
										100533,
										100540
									],
									[
										100617,
										100624
									],
									[
										100746,
										100753
									],
									[
										100860,
										100867
									],
									[
										101004,
										101011
									],
									[
										101163,
										101170
									],
									[
										101344,
										101351
									],
									[
										101483,
										101490
									],
									[
										101613,
										101620
									],
									[
										101853,
										101860
									],
									[
										102024,
										102031
									],
									[
										102206,
										102213
									],
									[
										102338,
										102345
									],
									[
										102675,
										102682
									],
									[
										102989,
										102996
									],
									[
										103328,
										103335
									],
									[
										103663,
										103670
									],
									[
										103862,
										103869
									],
									[
										104012,
										104019
									],
									[
										104177,
										104184
									],
									[
										104220,
										104227
									],
									[
										104289,
										104296
									],
									[
										104346,
										104353
									],
									[
										104400,
										104407
									],
									[
										104476,
										104483
									],
									[
										104556,
										104563
									],
									[
										104843,
										104850
									],
									[
										105068,
										105075
									],
									[
										105210,
										105217
									],
									[
										105358,
										105365
									],
									[
										105457,
										105464
									],
									[
										105664,
										105671
									],
									[
										105802,
										105809
									],
									[
										105925,
										105932
									],
									[
										106098,
										106105
									],
									[
										106232,
										106239
									],
									[
										106494,
										106501
									],
									[
										106723,
										106730
									],
									[
										106851,
										106858
									],
									[
										106995,
										107002
									],
									[
										107139,
										107146
									],
									[
										107295,
										107302
									],
									[
										107595,
										107602
									],
									[
										107780,
										107787
									],
									[
										108093,
										108100
									],
									[
										108221,
										108228
									],
									[
										108353,
										108360
									],
									[
										108493,
										108500
									],
									[
										108865,
										108872
									],
									[
										109037,
										109044
									],
									[
										109159,
										109166
									],
									[
										109343,
										109350
									],
									[
										109579,
										109586
									],
									[
										109774,
										109781
									],
									[
										109979,
										109986
									],
									[
										110275,
										110282
									],
									[
										110460,
										110467
									],
									[
										110838,
										110845
									],
									[
										111017,
										111024
									],
									[
										111149,
										111156
									],
									[
										111332,
										111339
									],
									[
										111421,
										111428
									],
									[
										111506,
										111513
									],
									[
										111666,
										111673
									],
									[
										111901,
										111908
									],
									[
										112265,
										112272
									],
									[
										112481,
										112488
									],
									[
										112564,
										112571
									],
									[
										112674,
										112681
									],
									[
										112988,
										112995
									],
									[
										113204,
										113211
									],
									[
										113287,
										113294
									],
									[
										113466,
										113473
									],
									[
										113705,
										113712
									],
									[
										113868,
										113875
									],
									[
										114038,
										114045
									],
									[
										114238,
										114245
									],
									[
										114414,
										114421
									],
									[
										114580,
										114587
									],
									[
										114824,
										114831
									],
									[
										115013,
										115020
									],
									[
										115165,
										115172
									],
									[
										115266,
										115273
									],
									[
										115429,
										115436
									],
									[
										115604,
										115611
									],
									[
										115722,
										115729
									],
									[
										115864,
										115871
									],
									[
										115961,
										115968
									],
									[
										116107,
										116114
									],
									[
										116253,
										116260
									],
									[
										116401,
										116408
									],
									[
										116551,
										116558
									],
									[
										116757,
										116764
									],
									[
										117096,
										117100
									],
									[
										117144,
										117148
									],
									[
										117317,
										117321
									],
									[
										117359,
										117363
									],
									[
										117663,
										117667
									],
									[
										117870,
										117874
									],
									[
										118135,
										118145
									],
									[
										118256,
										118266
									],
									[
										118312,
										118322
									],
									[
										118521,
										118531
									],
									[
										118725,
										118735
									],
									[
										118943,
										118953
									],
									[
										119145,
										119155
									],
									[
										119328,
										119338
									],
									[
										119710,
										119716
									],
									[
										119931,
										119937
									],
									[
										120190,
										120196
									],
									[
										120272,
										120278
									],
									[
										120465,
										120471
									],
									[
										120569,
										120575
									],
									[
										120944,
										120950
									],
									[
										121183,
										121189
									],
									[
										121601,
										121608
									],
									[
										121877,
										121884
									],
									[
										122114,
										122121
									],
									[
										122348,
										122355
									],
									[
										122624,
										122631
									],
									[
										122760,
										122767
									],
									[
										123020,
										123038
									],
									[
										123231,
										123249
									],
									[
										123437,
										123455
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								123026,
								123026
							]
						],
						"settings":
						{
							"output_tag": 9,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"tab_size": 2.0,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 50862.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "jni/src/camera.c",
					"settings":
					{
						"buffer_size": 10643,
						"regions":
						{
						},
						"selection":
						[
							[
								7562,
								7580
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3472.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "jni/android/android_utils.h",
					"settings":
					{
						"buffer_size": 1443,
						"regions":
						{
						},
						"selection":
						[
							[
								764,
								855
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 236.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "jni/android/android_utils.c",
					"settings":
					{
						"buffer_size": 10782,
						"regions":
						{
						},
						"selection":
						[
							[
								10705,
								10780
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 4.0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3820.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/com/miadzin/shmup/TouchpadNAActivity.java",
					"settings":
					{
						"buffer_size": 4854,
						"regions":
						{
						},
						"selection":
						[
							[
								3853,
								3853
							]
						],
						"settings":
						{
							"syntax": "Packages/Java/Java.tmLanguage",
							"tab_size": 4.0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 28.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 190.55078125,
	"status_bar_visible": true
}
